"""New migration

Revision ID: 71bb61f20470
Revises: 31851406acc6
Create Date: 2025-06-06 12:24:34.672052

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '71bb61f20470'
down_revision: Union[str, None] = '31851406acc6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), server_default='general', nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_permissions_id'), 'permissions', ['id'], unique=False)
    op.create_table('proxy_products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('proxy_type', sa.Enum('HTTP', 'HTTPS', 'SOCKS4', 'SOCKS5', name='proxytype'), nullable=False),
    sa.Column('proxy_category', sa.Enum('DATACENTER', 'RESIDENTIAL', 'MOBILE', 'NODEPAY', name='proxycategory'), nullable=False),
    sa.Column('session_type', sa.Enum('STICKY', 'ROTATING', name='sessiontype'), nullable=False),
    sa.Column('provider', sa.Enum('PROVIDER_711', 'WEBSHARE', 'PROXY_SELLER', 'SMARTPROXY', 'BRIGHT_DATA', 'INTERNAL', name='providertype'), nullable=False),
    sa.Column('country_code', sa.String(length=2), nullable=False),
    sa.Column('country_name', sa.String(length=100), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('price_per_proxy', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('price_per_gb', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('duration_days', sa.Integer(), nullable=False),
    sa.Column('min_quantity', sa.Integer(), server_default='1', nullable=False),
    sa.Column('max_quantity', sa.Integer(), server_default='1000', nullable=False),
    sa.Column('max_threads', sa.Integer(), nullable=True),
    sa.Column('bandwidth_limit_gb', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('uptime_guarantee', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('speed_mbps', sa.Integer(), nullable=True),
    sa.Column('points_per_hour', sa.Integer(), nullable=True),
    sa.Column('farm_efficiency', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('auto_claim', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('multi_account_support', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('ip_pool_size', sa.Integer(), nullable=True),
    sa.Column('stock_available', sa.Integer(), server_default='0', nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('is_featured', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('provider_product_id', sa.String(length=255), nullable=True),
    sa.Column('provider_metadata', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('duration_days > 0', name='positive_duration'),
    sa.CheckConstraint('max_quantity >= min_quantity', name='max_gte_min_quantity'),
    sa.CheckConstraint('min_quantity > 0', name='positive_min_quantity'),
    sa.CheckConstraint('price_per_proxy > 0', name='positive_price'),
    sa.CheckConstraint('stock_available >= 0', name='non_negative_stock'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_product_active_featured', 'proxy_products', ['is_active', 'is_featured'], unique=False)
    op.create_index('idx_product_category_country', 'proxy_products', ['proxy_category', 'country_code'], unique=False)
    op.create_index('idx_product_provider', 'proxy_products', ['provider', 'provider_product_id'], unique=False)
    op.create_index(op.f('ix_proxy_products_country_code'), 'proxy_products', ['country_code'], unique=False)
    op.create_index(op.f('ix_proxy_products_id'), 'proxy_products', ['id'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('is_verified', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('is_guest', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('is_admin', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('role', sa.Enum('USER', 'ADMIN', 'MODERATOR', 'MANAGER', name='userrole'), server_default='USER', nullable=False),
    sa.Column('balance', sa.DECIMAL(precision=18, scale=8), server_default='0.00000000', nullable=False),
    sa.Column('guest_session_id', sa.String(length=255), nullable=True),
    sa.Column('guest_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('email_verification_token', sa.String(length=255), nullable=True),
    sa.Column('email_verification_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_reset_token', sa.String(length=255), nullable=True),
    sa.Column('password_reset_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(is_guest = false AND email IS NOT NULL AND username IS NOT NULL AND hashed_password IS NOT NULL) OR (is_guest = true AND guest_session_id IS NOT NULL)', name='user_type_constraint'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('idx_user_session', 'users', ['guest_session_id', 'guest_expires_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_guest_session_id'), 'users', ['guest_session_id'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('key_hash', sa.String(length=64), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('permissions', sa.Text(), nullable=True),
    sa.Column('scopes', sa.Text(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), server_default='1000', nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('rate_limit > 0', name='positive_rate_limit'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_api_key_expires', 'api_keys', ['expires_at', 'is_active'], unique=False)
    op.create_index('idx_api_key_user_active', 'api_keys', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_api_keys_expires_at'), 'api_keys', ['expires_at'], unique=False)
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    op.create_index(op.f('ix_api_keys_user_id'), 'api_keys', ['user_id'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_number', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('total_amount', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('currency', sa.String(length=3), server_default='USD', nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PAID', 'PROCESSING', 'COMPLETED', 'CANCELLED', 'FAILED', 'REFUNDED', name='orderstatus'), nullable=False),
    sa.Column('payment_method', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('total_amount > 0', name='positive_total_amount'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_order_created', 'orders', ['created_at'], unique=False)
    op.create_index('idx_order_user_status', 'orders', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_order_number'), 'orders', ['order_number'], unique=True)
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    op.create_table('shopping_cart',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('guest_session_id', sa.String(length=255), nullable=True),
    sa.Column('proxy_product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('generation_params', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(user_id IS NOT NULL AND guest_session_id IS NULL) OR (user_id IS NULL AND guest_session_id IS NOT NULL)', name='user_or_session_cart'),
    sa.CheckConstraint('quantity > 0', name='positive_cart_quantity'),
    sa.ForeignKeyConstraint(['proxy_product_id'], ['proxy_products.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('guest_session_id', 'proxy_product_id', name='unique_session_product'),
    sa.UniqueConstraint('user_id', 'proxy_product_id', name='unique_user_product')
    )
    op.create_index('idx_cart_session', 'shopping_cart', ['guest_session_id', 'expires_at'], unique=False)
    op.create_index('idx_cart_user', 'shopping_cart', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_shopping_cart_guest_session_id'), 'shopping_cart', ['guest_session_id'], unique=False)
    op.create_index(op.f('ix_shopping_cart_id'), 'shopping_cart', ['id'], unique=False)
    op.create_index(op.f('ix_shopping_cart_user_id'), 'shopping_cart', ['user_id'], unique=False)
    op.create_table('user_permissions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'permission_id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('order_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('proxy_product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('total_price', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('generation_params', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('quantity > 0', name='positive_quantity'),
    sa.CheckConstraint('total_price > 0', name='positive_total_price'),
    sa.CheckConstraint('unit_price > 0', name='positive_unit_price'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['proxy_product_id'], ['proxy_products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_order_item_order', 'order_items', ['order_id'], unique=False)
    op.create_index(op.f('ix_order_items_id'), 'order_items', ['id'], unique=False)
    op.create_index(op.f('ix_order_items_order_id'), 'order_items', ['order_id'], unique=False)
    op.create_table('proxy_purchases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('proxy_product_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('proxy_list', sa.Text(), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('traffic_used_gb', sa.DECIMAL(precision=10, scale=2), server_default='0.00', nullable=False),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.Column('provider_order_id', sa.String(length=255), nullable=True),
    sa.Column('provider_metadata', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('traffic_used_gb >= 0', name='non_negative_traffic'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['proxy_product_id'], ['proxy_products.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_purchase_expires', 'proxy_purchases', ['expires_at', 'is_active'], unique=False)
    op.create_index('idx_purchase_provider', 'proxy_purchases', ['provider_order_id'], unique=False)
    op.create_index('idx_purchase_user_active', 'proxy_purchases', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_proxy_purchases_expires_at'), 'proxy_purchases', ['expires_at'], unique=False)
    op.create_index(op.f('ix_proxy_purchases_id'), 'proxy_purchases', ['id'], unique=False)
    op.create_index(op.f('ix_proxy_purchases_provider_order_id'), 'proxy_purchases', ['provider_order_id'], unique=False)
    op.create_index(op.f('ix_proxy_purchases_user_id'), 'proxy_purchases', ['user_id'], unique=False)
    op.create_table('transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('currency', sa.String(length=3), server_default='USD', nullable=False),
    sa.Column('transaction_type', sa.Enum('DEPOSIT', 'PURCHASE', 'REFUND', 'WITHDRAWAL', 'BALANCE_TOPUP', name='transactiontype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', name='transactionstatus'), nullable=False),
    sa.Column('payment_method', sa.String(length=50), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('provider_payment_id', sa.String(length=255), nullable=True),
    sa.Column('provider_metadata', sa.Text(), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('amount != 0', name='non_zero_amount'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_transaction_provider', 'transactions', ['provider_payment_id'], unique=False)
    op.create_index('idx_transaction_status_created', 'transactions', ['status', 'created_at'], unique=False)
    op.create_index('idx_transaction_user_type', 'transactions', ['user_id', 'transaction_type'], unique=False)
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_order_id'), 'transactions', ['order_id'], unique=False)
    op.create_index(op.f('ix_transactions_user_id'), 'transactions', ['user_id'], unique=False)
    op.create_table('balance_topups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('currency', sa.String(length=3), server_default='USD', nullable=False),
    sa.Column('payment_provider', sa.Enum('CRYPTOMUS', 'BALANCE', 'MANUAL', name='paymentprovider'), nullable=False),
    sa.Column('provider_payment_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', name='transactionstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('amount > 0', name='positive_topup_amount'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_topup_provider', 'balance_topups', ['payment_provider', 'provider_payment_id'], unique=False)
    op.create_index('idx_topup_user_status', 'balance_topups', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_balance_topups_id'), 'balance_topups', ['id'], unique=False)
    op.create_index(op.f('ix_balance_topups_transaction_id'), 'balance_topups', ['transaction_id'], unique=False)
    op.create_index(op.f('ix_balance_topups_user_id'), 'balance_topups', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_balance_topups_user_id'), table_name='balance_topups')
    op.drop_index(op.f('ix_balance_topups_transaction_id'), table_name='balance_topups')
    op.drop_index(op.f('ix_balance_topups_id'), table_name='balance_topups')
    op.drop_index('idx_topup_user_status', table_name='balance_topups')
    op.drop_index('idx_topup_provider', table_name='balance_topups')
    op.drop_table('balance_topups')
    op.drop_index(op.f('ix_transactions_user_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_order_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index('idx_transaction_user_type', table_name='transactions')
    op.drop_index('idx_transaction_status_created', table_name='transactions')
    op.drop_index('idx_transaction_provider', table_name='transactions')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_proxy_purchases_user_id'), table_name='proxy_purchases')
    op.drop_index(op.f('ix_proxy_purchases_provider_order_id'), table_name='proxy_purchases')
    op.drop_index(op.f('ix_proxy_purchases_id'), table_name='proxy_purchases')
    op.drop_index(op.f('ix_proxy_purchases_expires_at'), table_name='proxy_purchases')
    op.drop_index('idx_purchase_user_active', table_name='proxy_purchases')
    op.drop_index('idx_purchase_provider', table_name='proxy_purchases')
    op.drop_index('idx_purchase_expires', table_name='proxy_purchases')
    op.drop_table('proxy_purchases')
    op.drop_index(op.f('ix_order_items_order_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_id'), table_name='order_items')
    op.drop_index('idx_order_item_order', table_name='order_items')
    op.drop_table('order_items')
    op.drop_table('user_roles')
    op.drop_table('user_permissions')
    op.drop_index(op.f('ix_shopping_cart_user_id'), table_name='shopping_cart')
    op.drop_index(op.f('ix_shopping_cart_id'), table_name='shopping_cart')
    op.drop_index(op.f('ix_shopping_cart_guest_session_id'), table_name='shopping_cart')
    op.drop_index('idx_cart_user', table_name='shopping_cart')
    op.drop_index('idx_cart_session', table_name='shopping_cart')
    op.drop_table('shopping_cart')
    op.drop_index(op.f('ix_orders_user_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_order_number'), table_name='orders')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_index('idx_order_user_status', table_name='orders')
    op.drop_index('idx_order_created', table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_api_keys_user_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_expires_at'), table_name='api_keys')
    op.drop_index('idx_api_key_user_active', table_name='api_keys')
    op.drop_index('idx_api_key_expires', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_guest_session_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_user_session', table_name='users')
    op.drop_index('idx_user_email_active', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_proxy_products_id'), table_name='proxy_products')
    op.drop_index(op.f('ix_proxy_products_country_code'), table_name='proxy_products')
    op.drop_index('idx_product_provider', table_name='proxy_products')
    op.drop_index('idx_product_category_country', table_name='proxy_products')
    op.drop_index('idx_product_active_featured', table_name='proxy_products')
    op.drop_table('proxy_products')
    op.drop_index(op.f('ix_permissions_id'), table_name='permissions')
    op.drop_table('permissions')
    # ### end Alembic commands ###
