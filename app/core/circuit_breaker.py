"""
Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω logging
‚úÖ –£–ª—É—á—à–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ sync/async —Ñ—É–Ω–∫—Ü–∏–π
‚úÖ Enhanced error handling
‚úÖ Metrics –∏ monitoring
"""

import asyncio
import inspect
import logging
import time
from enum import Enum
from functools import wraps
from typing import Callable, Any, Union, Optional, Dict

logger = logging.getLogger(__name__)


class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker"""
    CLOSED = "closed"       # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "open"           # –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
    HALF_OPEN = "half_open" # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è


class CircuitBreakerError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ Circuit Breaker"""
    pass


class ServiceUnavailableError(CircuitBreakerError):
    """–û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    pass


class CircuitOpenError(CircuitBreakerError):
    """–û—à–∏–±–∫–∞ –∫–æ–≥–¥–∞ Circuit Breaker –æ—Ç–∫—Ä—ã—Ç."""
    pass


class CircuitBreaker:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

    –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    ‚úÖ Enhanced logging
    ‚úÖ Better typing support
    ‚úÖ Sync/Async function support
    ‚úÖ Metrics collection
    ‚úÖ Configurable exceptions
    """

    def __init__(
        self,
        failure_threshold: int = 5,
        recovery_timeout: int = 60,
        expected_exception: Union[Exception, tuple] = Exception,
        name: str = "CircuitBreaker"
    ):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å enhanced –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

        Args:
            failure_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            recovery_timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            expected_exception: –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—à–∏–±–∫–∞–º–∏
            name: –ò–º—è Circuit Breaker –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.expected_exception = expected_exception
        self.name = name

        # State tracking
        self.failure_count = 0
        self.success_count = 0
        self.last_failure_time: Optional[float] = None
        self.state = CircuitState.CLOSED

        # Metrics
        self.total_calls = 0
        self.total_failures = 0
        self.total_successes = 0
        self.state_changes: Dict[str, int] = {
            "closed_to_open": 0,
            "open_to_half_open": 0,
            "half_open_to_closed": 0,
            "half_open_to_open": 0
        }

        logger.info(f"üîß Circuit Breaker '{self.name}' initialized: "
                   f"threshold={failure_threshold}, timeout={recovery_timeout}s")

    async def call(self, func: Callable, *args, **kwargs) -> Any:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∑–∞—â–∏—Ç–æ–π Circuit Breaker.

        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (sync –∏–ª–∏ async)
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏

        Raises:
            CircuitOpenError: –ï—Å–ª–∏ Circuit Breaker –æ—Ç–∫—Ä—ã—Ç
            Exception: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
        """
        self.total_calls += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker
        if self.state == CircuitState.OPEN:
            if self._should_attempt_reset():
                self._change_state(CircuitState.HALF_OPEN)
                logger.info(f"üîÑ Circuit Breaker '{self.name}' attempting recovery (HALF_OPEN)")
            else:
                logger.warning(f"üö´ Circuit Breaker '{self.name}' is OPEN, call rejected")
                raise CircuitOpenError(f"Circuit breaker '{self.name}' is OPEN")

        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ sync –∏ async —Ñ—É–Ω–∫—Ü–∏–π
            if inspect.iscoroutinefunction(func):
                result = await func(*args, **kwargs)
            else:
                # –î–ª—è sync —Ñ—É–Ω–∫—Ü–∏–π –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                result = await asyncio.get_event_loop().run_in_executor(None, func, *args, **kwargs)

            self._on_success()
            return result

        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–º –¥–ª—è Circuit Breaker
            if isinstance(e, self.expected_exception):
                self._on_failure()
                logger.warning(f"‚ö†Ô∏è Circuit Breaker '{self.name}' registered failure: {type(e).__name__}")
            else:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ failure
                logger.debug(f"üîç Circuit Breaker '{self.name}' ignoring exception: {type(e).__name__}")

            raise  # Re-raise –∏—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

    def call_sync(self, func: Callable, *args, **kwargs) -> Any:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è call –¥–ª—è sync —Ñ—É–Ω–∫—Ü–∏–π.

        Args:
            func: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        self.total_calls += 1

        if self.state == CircuitState.OPEN:
            if self._should_attempt_reset():
                self._change_state(CircuitState.HALF_OPEN)
                logger.info(f"üîÑ Circuit Breaker '{self.name}' attempting recovery (HALF_OPEN)")
            else:
                logger.warning(f"üö´ Circuit Breaker '{self.name}' is OPEN, call rejected")
                raise CircuitOpenError(f"Circuit breaker '{self.name}' is OPEN")

        try:
            result = func(*args, **kwargs)
            self._on_success()
            return result

        except Exception as e:
            if isinstance(e, self.expected_exception):
                self._on_failure()
                logger.warning(f"‚ö†Ô∏è Circuit Breaker '{self.name}' registered failure: {type(e).__name__}")
            else:
                logger.debug(f"üîç Circuit Breaker '{self.name}' ignoring exception: {type(e).__name__}")

            raise

    def _should_attempt_reset(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–±—Ä–æ—Å."""
        if self.last_failure_time is None:
            return False

        time_since_failure = time.time() - self.last_failure_time
        should_reset = time_since_failure >= self.recovery_timeout

        if should_reset:
            logger.debug(f"üïê Circuit Breaker '{self.name}' recovery timeout elapsed: "
                        f"{time_since_failure:.1f}s >= {self.recovery_timeout}s")

        return should_reset

    def _on_success(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        self.success_count += 1
        self.total_successes += 1

        if self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É—Å–ø–µ—Ö –æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            self._change_state(CircuitState.CLOSED)
            logger.info(f"‚úÖ Circuit Breaker '{self.name}' recovered (HALF_OPEN -> CLOSED)")

        elif self.state == CircuitState.CLOSED:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if self.failure_count > 0:
                logger.debug(f"üîÑ Circuit Breaker '{self.name}' reset failure count: "
                           f"{self.failure_count} -> 0")
                self.failure_count = 0

    def _on_failure(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        self.failure_count += 1
        self.total_failures += 1
        self.last_failure_time = time.time()

        logger.debug(f"üí• Circuit Breaker '{self.name}' failure {self.failure_count}/{self.failure_threshold}")

        if self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ OPEN
            self._change_state(CircuitState.OPEN)
            logger.warning(f"üî¥ Circuit Breaker '{self.name}' failed recovery (HALF_OPEN -> OPEN)")

        elif self.state == CircuitState.CLOSED and self.failure_count >= self.failure_threshold:
            # –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫
            self._change_state(CircuitState.OPEN)
            logger.error(f"üö® Circuit Breaker '{self.name}' opened due to failures: "
                        f"{self.failure_count}/{self.failure_threshold}")

    def _change_state(self, new_state: CircuitState):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
        old_state = self.state
        self.state = new_state

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_key = f"{old_state.value}_to_{new_state.value}"
        if state_key in self.state_changes:
            self.state_changes[state_key] += 1

        logger.info(f"üîÑ Circuit Breaker '{self.name}' state: {old_state.value} -> {new_state.value}")

    def get_metrics(self) -> Dict[str, Any]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ Circuit Breaker."""
        return {
            "name": self.name,
            "state": self.state.value,
            "failure_count": self.failure_count,
            "success_count": self.success_count,
            "total_calls": self.total_calls,
            "total_failures": self.total_failures,
            "total_successes": self.total_successes,
            "failure_rate": self.total_failures / max(self.total_calls, 1),
            "last_failure_time": self.last_failure_time,
            "state_changes": self.state_changes.copy(),
            "config": {
                "failure_threshold": self.failure_threshold,
                "recovery_timeout": self.recovery_timeout,
                "expected_exception": str(self.expected_exception)
            }
        }

    def reset(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –†—É—á–Ω–æ–π —Å–±—Ä–æ—Å Circuit Breaker."""
        old_state = self.state
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.success_count = 0
        self.last_failure_time = None

        logger.info(f"üîÑ Circuit Breaker '{self.name}' manually reset: {old_state.value} -> CLOSED")

    def is_closed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Circuit Breaker –∑–∞–∫—Ä—ã—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç)."""
        return self.state == CircuitState.CLOSED

    def is_open(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Circuit Breaker –æ—Ç–∫—Ä—ã—Ç (–±–ª–æ–∫–∏—Ä—É–µ—Ç)."""
        return self.state == CircuitState.OPEN

    def is_half_open(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Circuit Breaker –≤ –ø–æ–ª—É–æ—Ç–∫—Ä—ã—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
        return self.state == CircuitState.HALF_OPEN


# –ù–û–í–´–ô –ö–õ–ê–°–°: Circuit Breaker Manager
class CircuitBreakerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ Circuit Breaker."""

    def __init__(self):
        self._breakers: Dict[str, CircuitBreaker] = {}

    def create_breaker(
        self,
        name: str,
        failure_threshold: int = 5,
        recovery_timeout: int = 60,
        expected_exception: Union[Exception, tuple] = Exception
    ) -> CircuitBreaker:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Circuit Breaker."""
        if name in self._breakers:
            logger.warning(f"‚ö†Ô∏è Circuit Breaker '{name}' already exists, returning existing")
            return self._breakers[name]

        breaker = CircuitBreaker(
            failure_threshold=failure_threshold,
            recovery_timeout=recovery_timeout,
            expected_exception=expected_exception,
            name=name
        )

        self._breakers[name] = breaker
        logger.info(f"‚úÖ Created Circuit Breaker: {name}")
        return breaker

    def get_breaker(self, name: str) -> Optional[CircuitBreaker]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Circuit Breaker –ø–æ –∏–º–µ–Ω–∏."""
        return self._breakers.get(name)

    def get_all_metrics(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—Å–µ—Ö Circuit Breaker."""
        return {name: breaker.get_metrics() for name, breaker in self._breakers.items()}

    def reset_all(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö Circuit Breaker."""
        for breaker in self._breakers.values():
            breaker.reset()
        logger.info("üîÑ All Circuit Breakers reset")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
circuit_breaker_manager = CircuitBreakerManager()


# DECORATOR: Circuit Breaker –∫–∞–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
def circuit_breaker(
    name: str,
    failure_threshold: int = 5,
    recovery_timeout: int = 60,
    expected_exception: Union[Exception, tuple] = Exception
):
    """
    –ù–û–í–´–ô DECORATOR: Circuit Breaker –∫–∞–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π.

    Usage:
        @circuit_breaker("api_service", failure_threshold=3)
        async def call_external_api():
            # –∫–æ–¥ –≤—ã–∑–æ–≤–∞ API
    """
    def decorator(func: Callable):
        breaker = circuit_breaker_manager.create_breaker(
            name=name,
            failure_threshold=failure_threshold,
            recovery_timeout=recovery_timeout,
            expected_exception=expected_exception
        )

        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            return await breaker.call(func, *args, **kwargs)

        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            return breaker.call_sync(func, *args, **kwargs)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π wrapper –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        if inspect.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper

    return decorator
