import osfrom typing import List, Optionalfrom pydantic import Field, field_validator, computed_fieldfrom pydantic_settings import BaseSettings, SettingsConfigDict# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—ÉDOTENV_PATH = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), ".env")class Settings(BaseSettings):    model_config = SettingsConfigDict(        env_file=DOTENV_PATH,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å        env_file_encoding="utf-8",        case_sensitive=False,        extra="ignore"    )    # Database settings    postgres_user: str = Field(..., description="PostgreSQL username")    postgres_password: str = Field(..., description="PostgreSQL password")    postgres_db: str = Field(..., description="PostgreSQL database name")    postgres_host: str = Field(default="localhost", description="PostgreSQL host")    postgres_port: int = Field(default=5432, ge=1, le=65535, description="PostgreSQL port")    database_echo: bool = Field(default=False, description="Enable SQLAlchemy query logging")    @computed_field    @property    def database_url(self) -> str:        return f"postgresql+asyncpg://{self.postgres_user}:{self.postgres_password}@{self.postgres_host}:{self.postgres_port}/{self.postgres_db}"    # Redis settings    redis_host: str = Field(default="localhost", description="Redis host")    redis_port: int = Field(default=6379, ge=1, le=65535, description="Redis port")    redis_db: int = Field(default=0, ge=0, le=15, description="Redis database number")    redis_password: Optional[str] = Field(default=None, description="Redis password")    redis_max_connections: int = Field(default=20, ge=1, le=100, description="Redis max connections")    redis_socket_timeout: int = Field(default=5, ge=1, description="Redis socket timeout")    redis_socket_connect_timeout: int = Field(default=5, ge=1, description="Redis connect timeout")    @computed_field    @property    def redis_url(self) -> str:        if self.redis_password:            return f"redis://:{self.redis_password}@{self.redis_host}:{self.redis_port}/{self.redis_db}"        return f"redis://{self.redis_host}:{self.redis_port}/{self.redis_db}"    # Application settings    app_name: str = Field(default="Gemup Marketplace", description="Application name")    app_version: str = Field(default="1.0.0", description="Application version")    debug: bool = Field(default=False, description="Debug mode")    environment: str = Field(default="development", description="Environment")    @classmethod    @field_validator('environment')    def validate_environment(cls, v: str) -> str:        allowed = ['development', 'staging', 'production']        if v not in allowed:            raise ValueError(f'Environment must be one of: {allowed}')        return v    # Security settings    secret_key: str = Field(..., min_length=32, description="Secret key for JWT")    algorithm: str = Field(default="HS256", description="JWT algorithm")    access_token_expire_minutes: int = Field(        default=30,        ge=1,        le=43200,        description="Access token expiration in minutes"    )    # CORS settings    cors_origins: str = Field(        default="http://localhost:3000,http://localhost:8000",        description="Comma-separated list of allowed origins"    )    @computed_field    @property    def cors_origins_list(self) -> List[str]:        return [origin.strip() for origin in self.cors_origins.split(",") if origin.strip()]    # Cache settings    cache_default_ttl: int = Field(default=3600, ge=1, description="Default cache TTL in seconds")    cache_session_ttl: int = Field(default=86400, ge=1, description="Session cache TTL in seconds")    cache_cart_ttl: int = Field(default=7200, ge=1, description="Cart cache TTL in seconds")    cache_proxy_ttl: int = Field(default=2592000, ge=1, description="Proxy cache TTL in seconds")    # Rate limiting    rate_limit_requests: int = Field(default=100, ge=1, description="Rate limit requests per window")    rate_limit_window: int = Field(default=3600, ge=1, description="Rate limit window in seconds")    # Guest session settings    guest_session_expire_hours: int = Field(        default=24,        ge=1,        le=168,        description="Guest session expiration in hours"    )    guest_cart_expire_hours: int = Field(        default=2,        ge=1,        le=24,        description="Guest cart expiration in hours"    )    # Cryptomus payment settings    cryptomus_api_key: str = Field(default="", description="Cryptomus API key")    cryptomus_merchant_id: str = Field(default="", description="Cryptomus merchant ID")    cryptomus_webhook_secret: str = Field(default="", description="Cryptomus webhook secret")    cryptomus_base_url: str = Field(        default="https://api.cryptomus.com/v1",        description="Cryptomus API base URL"    )    # Proxy providers settings    provider_711_api_key: str = Field(default="", description="711 Proxy API key")    provider_711_base_url: str = Field(        default="https://api.711proxy.com",        description="711 Proxy API base URL"    )    proxy_seller_api_key: str = Field(default="", description="ProxySeller API key")    proxy_seller_base_url: str = Field(        default="https://proxy-seller.com/api",        description="ProxySeller API base URL"    )    lightning_api_key: str = Field(default="", description="Lightning Proxies API key")    lightning_base_url: str = Field(        default="https://api.lightningproxies.com",        description="Lightning Proxies API base URL"    )    goproxy_api_key: str = Field(default="", description="GoProxy API key")    goproxy_base_url: str = Field(        default="https://api.goproxy.com",        description="GoProxy API base URL"    )    # Logging settings    log_level: str = Field(default="INFO", description="Logging level")    log_format: str = Field(        default="%(asctime)s - %(name)s - %(levelname)s - %(message)s",        description="Log format"    )    # API settings    api_prefix: str = Field(default="/api/v1", description="API prefix")    docs_url: Optional[str] = Field(default="/docs", description="Swagger docs URL")    redoc_url: Optional[str] = Field(default="/redoc", description="ReDoc URL")    def is_production(self) -> bool:        """Check if running in production environment"""        return self.environment == "production"    def is_development(self) -> bool:        """Check if running in development environment"""        return self.environment == "development"# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫settings = Settings()# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—Éprint(f"üìÅ –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É: {DOTENV_PATH}")print(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(DOTENV_PATH)}")