"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL.

"""

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base
from sqlalchemy.pool import AsyncAdaptedQueuePool
from typing import AsyncGenerator
from app.core.config import settings
import logging
from sqlalchemy import text

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(
    settings.database_url.replace("postgresql://", "postgresql+asyncpg://"),
    echo=settings.database_echo,
    poolclass=AsyncAdaptedQueuePool,
    pool_size=20,
    max_overflow=30,
    pool_pre_ping=True,
    pool_recycle=3600,
    future=True
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
SessionLocal = async_sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
    autoflush=False,
    autocommit=False
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_db() -> AsyncGenerator[AsyncSession, None]:
    async with SessionLocal() as session:
        try:
            yield session
        except Exception as e:
            await session.rollback()
            logger.error(f"Database session error: {e}")
            raise
        finally:
            await session.close()


# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def create_tables(force: bool = False):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü.

    –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!
    –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏.

    Args:
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    """
    if not force and settings.environment == "production":
        logger.warning("create_tables() –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ production! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏.")
        return

    if not force and settings.environment != "test":
        logger.info("create_tables() –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ development/production")
        return

    logger.info("Creating tables via SQLAlchemy (only for tests)")
    async with engine.begin() as conn:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º force=True
        await conn.run_sync(Base.metadata.create_all)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
async def drop_tables():
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü.

    –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤!
    """
    if settings.environment == "production":
        raise RuntimeError("drop_tables() –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ production!")

    logger.warning("Dropping all tables (only for tests)")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async def close_db():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ connections –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("Closing database connections")
    await engine.dispose()


# Health check –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def check_db_health() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º error handling.

    Returns:
        bool: True –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        async with SessionLocal() as session:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å timeout
            result = await session.execute(text("SELECT 1 as health_check"))
            health_value = result.scalar()

            if health_value != 1:
                logger.error("Database health check returned unexpected value")
                return False

            logger.debug("Database health check passed")
            return True

    except Exception as e:
        logger.error(f"Database health check failed: {e}")
        return False


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è development (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
async def init_db_for_development():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è development –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Alembic.
    """
    try:
        async with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users (–∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è —Å—Ö–µ–º—ã)
            result = await session.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'users'
                );
            """))

            tables_exist = result.scalar()

            if not tables_exist:
                logger.warning("""
                üö® –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
                
                –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –ë–î –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏:
                
                1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:
                   make migrate
                   
                2. –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é:
                   make create-migration msg="Initial tables"
                   make migrate
                
                3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
                   docker compose exec web /app/.venv/bin/alembic current
                """)
            else:
                logger.info("‚úÖ Database tables exist and ready")

    except Exception as e:
        logger.error(f"Failed to check database initialization: {e}")


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Alembic
async def check_alembic_status():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Alembic –º–∏–≥—Ä–∞—Ü–∏–π.

    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è debugging –ø—Ä–æ–±–ª–µ–º —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏.
    """
    try:
        async with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ alembic_version
            result = await session.execute(text("""
                SELECT version_num FROM alembic_version 
                ORDER BY version_num DESC LIMIT 1;
            """))

            current_version = result.scalar()

            if current_version:
                logger.info(f"‚úÖ Alembic current version: {current_version}")
                return current_version
            else:
                logger.warning("‚ö†Ô∏è Alembic version table exists but no version found")
                return None

    except Exception as e:
        logger.warning(f"Alembic status check failed (normal if migrations not applied yet): {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î
async def get_database_info():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è debugging.

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
    """
    try:
        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
            result = await session.execute(text("""
                SELECT 
                    version() as pg_version,
                    current_database() as database_name,
                    current_user as current_user,
                    current_setting('server_version') as server_version
            """))

            db_info = result.fetchone()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            tables_result = await session.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name;
            """))

            tables = [row[0] for row in tables_result.fetchall()]

            return {
                "pg_version": db_info[0] if db_info else "unknown",
                "database_name": db_info[1] if db_info else "unknown",
                "current_user": db_info[2] if db_info else "unknown",
                "server_version": db_info[3] if db_info else "unknown",
                "tables": tables,
                "tables_count": len(tables)
            }

    except Exception as e:
        logger.error(f"Failed to get database info: {e}")
        return {"error": str(e)}


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
async def init_db():
    """
    –£–°–¢–ê–†–ï–í–®–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

    –¢–µ–ø–µ—Ä—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Alembic –º–∏–≥—Ä–∞—Ü–∏–∏.
    """
    logger.warning("""
    init_db() —É—Å—Ç–∞—Ä–µ–ª–∞! 
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏:
    - make migrate
    - docker compose exec web /app/.venv/bin/alembic upgrade head
    """)

    # –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –≤—Å–µ –µ—â–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    if settings.environment == "test":
        await create_tables(force=True)
    else:
        await init_db_for_development()
