from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmakerfrom sqlalchemy.orm import declarative_basefrom sqlalchemy.pool import AsyncAdaptedQueuePoolfrom typing import AsyncGeneratorfrom app.core.config import settingsimport loggingfrom sqlalchemy import textlogger = logging.getLogger(__name__)# Создание асинхронного движка базы данныхengine = create_async_engine(    settings.database_url.replace("postgresql://", "postgresql+asyncpg://"),    echo=settings.database_echo,    poolclass=AsyncAdaptedQueuePool,    pool_size=20,    max_overflow=30,    pool_pre_ping=True,    pool_recycle=3600,    future=True)# Создание фабрики асинхронных сессийSessionLocal = async_sessionmaker(    bind=engine,    class_=AsyncSession,    expire_on_commit=False,    autoflush=False,    autocommit=False)# Базовый класс для моделейBase = declarative_base()# Dependency для получения асинхронной сессии базы данныхasync def get_db() -> AsyncGenerator[AsyncSession, None]:    async with SessionLocal() as session:        try:            yield session        except Exception as e:            await session.rollback()            logger.error(f"Database session error: {e}")            raise        finally:            await session.close()# Функция для создания всех таблицasync def create_tables():    async with engine.begin() as conn:        await conn.run_sync(Base.metadata.create_all)# Функция для удаления всех таблиц (для тестов)async def drop_tables():    async with engine.begin() as conn:        await conn.run_sync(Base.metadata.drop_all)# Функция для закрытия соединенийasync def close_db():    await engine.dispose()# Health check для базы данныхasync def check_db_health() -> bool:    try:        async with SessionLocal() as session:            # используем text() для raw SQL            result = await session.execute(text("SELECT 1"))            return result.scalar() == 1    except Exception as e:        logger.error(f"Database health check failed: {e}")        return False