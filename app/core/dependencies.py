from typing import Optionalfrom fastapi import Depends, HTTPException, statusfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentialsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom app.core.db import get_dbfrom app.core.auth import auth_handlerfrom app.crud.user import user_crudfrom app.models.models import Userimport logginglogger = logging.getLogger(__name__)security = HTTPBearer()async def get_current_user_from_token(        credentials: HTTPAuthorizationCredentials = Depends(security),        db: AsyncSession = Depends(get_db)) -> User:    """Получение текущего пользователя из JWT токена"""    try:        payload = auth_handler.decode_token(credentials.credentials)        user_id: int = int(payload.get("sub"))        if user_id is None:            raise HTTPException(                status_code=status.HTTP_401_UNAUTHORIZED,                detail="Could not validate credentials"            )        user = await user_crud.get(db, obj_id=user_id)        if user is None:            raise HTTPException(                status_code=status.HTTP_401_UNAUTHORIZED,                detail="User not found"            )        if not user.is_active:            raise HTTPException(                status_code=status.HTTP_400_BAD_REQUEST,                detail="Inactive user"            )        logger.info(f"User {user_id} authenticated successfully")        return user    except Exception as e:        logger.error(f"Authentication error: {e}")        raise HTTPException(            status_code=status.HTTP_401_UNAUTHORIZED,            detail="Could not validate credentials"        )async def get_current_registered_user(        current_user: User = Depends(get_current_user_from_token)) -> User:    """Получение только зарегистрированного пользователя (не гостя)"""    if current_user.is_guest:        raise HTTPException(            status_code=status.HTTP_403_FORBIDDEN,            detail="Access forbidden. Registered user required."        )    return current_userasync def get_current_user_or_create_guest(        db: AsyncSession = Depends(get_db),        credentials: Optional[HTTPAuthorizationCredentials] = Depends(HTTPBearer(auto_error=False))) -> User:    """Получение пользователя или создание гостевого"""    if credentials:        try:            return await get_current_user_from_token(credentials, db)        except HTTPException:            pass    # Создаём гостевого пользователя    guest_user = await user_crud.create_guest_user(db)    return guest_user