import loggingfrom fastapi import HTTPException, statusfrom fastapi.exceptions import RequestValidationErrorfrom fastapi.responses import JSONResponselogger = logging.getLogger(__name__)class ProxyMarketplaceException(Exception):    """Базовое исключение для маркетплейса"""    passclass UserNotFoundException(ProxyMarketplaceException):    """Пользователь не найден"""    passclass InsufficientBalanceException(ProxyMarketplaceException):    """Недостаточно средств на балансе"""    passclass ProxyNotAvailableException(ProxyMarketplaceException):    """Прокси недоступны"""    passclass PaymentException(ProxyMarketplaceException):    """Ошибка платежа"""    passasync def http_exception_handler(exc: HTTPException):    """Обработчик HTTP исключений"""    logger.error(f"HTTP {exc.status_code}: {exc.detail}")    return JSONResponse(        status_code=exc.status_code,        content={            "error": True,            "message": exc.detail,            "status_code": exc.status_code        }    )async def validation_exception_handler(exc: RequestValidationError):    """Обработчик ошибок валидации"""    logger.error(f"Validation error: {exc.errors()}")    return JSONResponse(        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,        content={            "error": True,            "message": "Validation error",            "details": exc.errors()        }    )async def general_exception_handler(exc: Exception):    """Общий обработчик исключений"""    logger.error(f"Unhandled exception: {str(exc)}", exc_info=True)    return JSONResponse(        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,        content={            "error": True,            "message": "Internal server error"        }    )