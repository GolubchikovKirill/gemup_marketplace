from datetime import datetimefrom contextlib import asynccontextmanagerfrom fastapi import FastAPIfrom fastapi.exceptions import RequestValidationErrorfrom starlette.exceptions import HTTPException as StarletteHTTPExceptionfrom app.routes import auth, users, productsfrom app.core.config import settingsfrom app.core.db import close_db, check_db_healthfrom app.core.redis import redis_client, get_redis_healthfrom app.core.migrations import init_alembicfrom app.core.middleware import setup_middlewarefrom app.core.exceptions import (    http_exception_handler,    validation_exception_handler,    general_exception_handler)import logging# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—èlogging.basicConfig(    level=getattr(logging, settings.log_level),    format=settings.log_format)logger = logging.getLogger(__name__)@asynccontextmanagerasync def lifespan(_: FastAPI):    # Startup    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")    try:        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis        await redis_client.connect()        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)        await init_alembic()    except Exception as e:        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –∏–∑-–∑–∞ –º–∏–≥—Ä–∞—Ü–∏–π        logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")    yield    # Shutdown    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")    try:        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î        await close_db()        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis        await redis_client.disconnect()        logger.info("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")    except Exception as e:        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")app = FastAPI(    title=settings.app_name,    version=settings.app_version,    description="Backend API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –ø—Ä–æ–∫—Å–∏",    debug=settings.debug,    docs_url=settings.docs_url if not settings.is_production() else None,    redoc_url=settings.redoc_url if not settings.is_production() else None,    lifespan=lifespan)# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middlewaresetup_middleware(app)# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ exception handlersapp.add_exception_handler(StarletteHTTPException, http_exception_handler)app.add_exception_handler(RequestValidationError, validation_exception_handler)app.add_exception_handler(Exception, general_exception_handler)@app.get("/")async def root():    return {        "message": "Gemup Marketplace API",        "app": settings.app_name,        "version": settings.app_version,        "status": "running",        "environment": settings.environment    }@app.get("/health")async def health_check():    redis_status = await get_redis_health()    db_status = await check_db_health()    return {        "status": "healthy" if (redis_status and db_status) else "degraded",        "database": "connected" if db_status else "disconnected",        "redis": "connected" if redis_status else "disconnected",        "timestamp": datetime.now().isoformat(),        "environment": settings.environment    }app.include_router(auth.router, prefix=settings.api_prefix)app.include_router(users.router, prefix=settings.api_prefix)app.include_router(products.router, prefix=settings.api_prefix)