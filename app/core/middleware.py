from fastapi import FastAPI, Requestfrom fastapi.middleware.cors import CORSMiddlewarefrom fastapi.middleware.trustedhost import TrustedHostMiddlewarefrom starlette.middleware.gzip import GZipMiddlewarefrom starlette.middleware.sessions import SessionMiddlewareimport timeimport loggingfrom app.core.config import settingslogger = logging.getLogger(__name__)def setup_middleware(app: FastAPI) -> None:    """Настройка middleware для приложения"""    # CORS middleware    app.add_middleware(        CORSMiddleware,        allow_origins=settings.cors_origins_list,        allow_credentials=True,        allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],        allow_headers=["*"],    )    # Gzip compression    app.add_middleware(GZipMiddleware, minimum_size=1000)    # Session middleware    app.add_middleware(        SessionMiddleware,        secret_key=settings.secret_key,        max_age=settings.cache_session_ttl,    )    # Trusted host middleware (для продакшена)    if settings.is_production():        app.add_middleware(            TrustedHostMiddleware,            allowed_hosts=["*.yourdomain.com", "yourdomain.com"]        )    # Custom middleware для логирования    @app.middleware("http")    async def log_requests(request: Request, call_next):        start_time = time.time()        response = await call_next(request)        process_time = time.time() - start_time        logger.info(            f"{request.method} {request.url.path} - "            f"Status: {response.status_code} - "            f"Time: {process_time:.4f}s"        )        response.headers["X-Process-Time"] = str(process_time)        return response