"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Alembic –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
–ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ —Å—Ö–µ–º—ã –ë–î.
"""

import asyncio
import logging
import os
from typing import Optional, List, Dict, Any
from concurrent.futures import ThreadPoolExecutor

from alembic import command
from alembic.config import Config
from alembic.runtime.migration import MigrationContext
from alembic.script import ScriptDirectory
from sqlalchemy import text, create_engine
from sqlalchemy.ext.asyncio import create_async_engine

from app.core.config import settings

logger = logging.getLogger(__name__)


class MigrationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π, –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–π
    –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤ development –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π."""
        self.alembic_cfg: Optional[Config] = None
        self.alembic_ini_path = self._find_alembic_ini()

    @staticmethod
    def _find_alembic_ini() -> str:
        """
        –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ alembic.ini –≤ –ø—Ä–æ–µ–∫—Ç–µ.

        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É alembic.ini
        """
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ alembic.ini
        possible_paths = [
            "alembic.ini",
            "../alembic.ini",
            "../../alembic.ini",
            "/app/alembic.ini",
            os.path.join(os.path.dirname(__file__), "..", "..", "alembic.ini")
        ]

        for path in possible_paths:
            if os.path.exists(path):
                logger.debug(f"Found alembic.ini at: {path}")
                return os.path.abspath(path)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_path = "/app/alembic.ini"
        logger.warning(f"alembic.ini not found, using default path: {default_path}")
        return default_path

    def get_alembic_config(self) -> Config:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Alembic.

        Returns:
            Config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Alembic
        """
        if self.alembic_cfg is None:
            try:
                self.alembic_cfg = Config(self.alembic_ini_path)

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–ª—è Alembic)
                database_url = settings.database_url
                if database_url.startswith("postgresql+asyncpg://"):
                    database_url = database_url.replace("postgresql+asyncpg://", "postgresql://")

                self.alembic_cfg.set_main_option("sqlalchemy.url", database_url)

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
                script_location = self.alembic_cfg.get_main_option("script_location")
                if script_location and not os.path.isabs(script_location):
                    base_dir = os.path.dirname(self.alembic_ini_path)
                    script_location = os.path.join(base_dir, script_location)
                    self.alembic_cfg.set_main_option("script_location", script_location)

                logger.debug("Alembic configuration loaded successfully")

            except Exception as config_error:
                logger.error(f"Failed to load Alembic configuration: {config_error}")
                raise

        return self.alembic_cfg

    async def check_migration_status(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π.

        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
        """
        try:
            config = self.get_alembic_config()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Alembic
            sync_database_url = settings.database_url.replace("postgresql+asyncpg://", "postgresql://")
            engine = create_engine(sync_database_url)

            def check_status():
                """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π."""
                try:
                    with engine.begin() as conn:
                        migration_context = MigrationContext.configure(conn)
                        current_revision = migration_context.get_current_revision()

                        script_dir = ScriptDirectory.from_config(config)
                        head_revision = script_dir.get_current_head()
                        revisions = list(script_dir.walk_revisions())

                        return {
                            "current_revision": current_revision,
                            "head_revision": head_revision,
                            "is_up_to_date": current_revision == head_revision,
                            "total_revisions": len(revisions),
                            "needs_upgrade": current_revision != head_revision
                        }
                finally:
                    engine.dispose()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ thread pool
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                status = await loop.run_in_executor(executor, check_status)

            logger.info(f"Migration status: {status}")
            return status

        except Exception as status_error:
            logger.error(f"Error checking migration status: {status_error}")
            return {
                "error": str(status_error),
                "current_revision": None,
                "head_revision": None,
                "is_up_to_date": False,
                "needs_upgrade": False
            }

    async def run_migrations(self, target_revision: str = "head") -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏.

        Args:
            target_revision: –¶–µ–ª–µ–≤–∞—è —Ä–µ–≤–∏–∑–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "head")

        Returns:
            bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üîÑ Running migrations to revision: {target_revision}")

            config = self.get_alembic_config()

            def run_upgrade():
                """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ upgrade."""
                command.upgrade(config, target_revision)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ thread pool —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å greenlet –æ—à–∏–±–∫–∏
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                await loop.run_in_executor(executor, run_upgrade)

            logger.info("‚úÖ Migrations completed successfully")
            return True

        except Exception as migration_error:
            logger.error(f"‚ùå Migration failed: {migration_error}")

            if settings.is_development():
                logger.exception("Migration traceback:")

            return False

    async def downgrade_migrations(self, target_revision: str) -> bool:
        """
        –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–µ–≤–∏–∑–∏–∏.

        Args:
            target_revision: –¶–µ–ª–µ–≤–∞—è —Ä–µ–≤–∏–∑–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.warning(f"‚ö†Ô∏è Downgrading migrations to revision: {target_revision}")

            config = self.get_alembic_config()

            def run_downgrade():
                """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ downgrade."""
                command.downgrade(config, target_revision)

            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                await loop.run_in_executor(executor, run_downgrade)

            logger.info("‚úÖ Migration downgrade completed")
            return True

        except Exception as downgrade_error:
            logger.error(f"‚ùå Migration downgrade failed: {downgrade_error}")
            return False

    def create_migration(self, migration_message: str, auto_generate: bool = True) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.

        Args:
            migration_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            auto_generate: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

        Returns:
            bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not settings.is_development():
                logger.error("Migration creation is only allowed in development environment")
                return False

            logger.info(f"Creating new migration: {migration_message}")

            config = self.get_alembic_config()

            if auto_generate:
                command.revision(config, message=migration_message, autogenerate=True)
            else:
                command.revision(config, message=migration_message)

            logger.info("‚úÖ Migration created successfully")
            return True

        except Exception as create_error:
            logger.error(f"‚ùå Failed to create migration: {create_error}")
            return False

    async def get_migration_history(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π.

        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            config = self.get_alembic_config()
            script_dir = ScriptDirectory.from_config(config)

            revisions = []
            for rev in script_dir.walk_revisions():
                revision_info = {
                    "revision": rev.revision,
                    "down_revision": rev.down_revision,
                    "branch_labels": getattr(rev, 'branch_labels', None),
                    "doc": rev.doc,
                    "path": rev.path if hasattr(rev, 'path') else str(rev.module)
                }
                revisions.append(revision_info)

            return revisions

        except Exception as history_error:
            logger.error(f"Error getting migration history: {history_error}")
            return []

    @staticmethod
    async def check_alembic_table() -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã alembic_version.

        Returns:
            bool: True –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            engine = create_async_engine(settings.database_url)

            async with engine.begin() as conn:
                result = await conn.execute(text(
                    "SELECT EXISTS (SELECT FROM information_schema.tables "
                    "WHERE table_name = 'alembic_version')"
                ))
                exists = result.scalar()

            await engine.dispose()
            return bool(exists)

        except Exception as check_error:
            logger.error(f"Error checking alembic table: {check_error}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–π
migration_manager = MigrationManager()


async def init_alembic() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
    –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        logger.info("üîÑ Initializing Alembic migrations...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã alembic_version
        if not await migration_manager.check_alembic_table():
            logger.info("üì¶ Alembic version table not found, initializing...")

            config = migration_manager.get_alembic_config()

            def stamp_head():
                """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è."""
                command.stamp(config, "head")

            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                await loop.run_in_executor(executor, stamp_head)

            logger.info("‚úÖ Alembic initialized with current head")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
        status = await migration_manager.check_migration_status()

        if "error" in status:
            logger.error(f"‚ùå Migration check failed: {status['error']}")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if status.get("needs_upgrade", False):
            logger.info("üì¶ Database schema needs update, running migrations...")

            success = await migration_manager.run_migrations()

            if success:
                logger.info("‚úÖ Database migrations completed successfully")
            else:
                logger.error("‚ùå Database migrations failed")

                if settings.is_production():
                    raise Exception("Critical: Database migrations failed in production")
        else:
            logger.info("‚úÖ Database schema is up to date")

    except Exception as init_error:
        logger.error(f"‚ùå Alembic initialization failed: {init_error}")

        if settings.is_production():
            raise
        else:
            logger.warning("‚ö†Ô∏è Continuing startup without migrations (development mode)")


async def create_migration_async(message: str, auto_generate: bool = True) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        auto_generate: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    return migration_manager.create_migration(message, auto_generate)


async def check_migrations_status() -> Dict[str, Any]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π.

    Returns:
        Dict[str, Any]: –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
    """
    return await migration_manager.check_migration_status()
