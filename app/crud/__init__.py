"""CRUD модули для работы с моделями базы данных.Содержит все CRUD операции для управления данными приложения.Каждый CRUD модуль предоставляет стандартные операции создания, чтения,обновления и удаления для соответствующих моделей, а также специфичную бизнес-логику.Модули:- api_key: Управление API ключами для внешних интеграций- base: Базовый CRUD класс с общей функциональностью- order: Управление заказами пользователей- permission: Система разрешений и ролей- proxy_product: Каталог продуктов прокси-серверов- proxy_purchase: Приобретенные пользователями прокси- shopping_cart: Корзина покупок (для пользователей и гостей)- transaction: Финансовые транзакции и платежи- user: Управление пользователями и аутентификацияИспользование:    from app.crud import user_crud, order_crud    user = await user_crud.get(db, obj_id=1)    orders = await order_crud.get_user_orders(db, user_id=1)"""from .api_key import api_key_crudfrom .base import CRUDBasefrom .order import order_crudfrom .permission import permission_crudfrom .proxy_product import proxy_product_crudfrom .proxy_purchase import proxy_purchase_crudfrom .shopping_cart import shopping_cart_crudfrom .transaction import transaction_crudfrom .user import user_crud__all__ = [    # Базовый CRUD класс    "CRUDBase",    # CRUD экземпляры для всех моделей    "api_key_crud",    "order_crud",    "permission_crud",    "proxy_product_crud",    "proxy_purchase_crud",    "shopping_cart_crud",    "transaction_crud",    "user_crud",]# Версия CRUD модулей__version__ = "1.0.0"# Словарь для быстрого доступа к CRUD операциям по имени моделиCRUD_REGISTRY = {    "api_key": api_key_crud,    "order": order_crud,    "permission": permission_crud,    "proxy_product": proxy_product_crud,    "proxy_purchase": proxy_purchase_crud,    "shopping_cart": shopping_cart_crud,    "transaction": transaction_crud,    "user": user_crud,}def get_crud(model_name: str):    """    Получение CRUD операций по имени модели.    Args:        model_name: Имя модели (например, "user", "order")    Returns:        CRUD экземпляр для указанной модели    Raises:        KeyError: Если модель не найдена    Example:        user_crud = get_crud("user")        user = await user_crud.get(db, obj_id=1)    """    if model_name not in CRUD_REGISTRY:        available_models = ", ".join(CRUD_REGISTRY.keys())        raise KeyError(f"CRUD for model '{model_name}' not found. Available: {available_models}")    return CRUD_REGISTRY[model_name]