import loggingfrom typing import List, Optionalfrom datetime import datetime, timedeltafrom decimal import Decimalfrom sqlalchemy import select, and_from sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy.orm import selectinloadfrom app.crud.base import CRUDBasefrom app.models.models import ShoppingCartfrom app.schemas.cart import CartItemCreate, CartItemUpdatelogger = logging.getLogger(__name__)class CRUDShoppingCart(CRUDBase[ShoppingCart, CartItemCreate, CartItemUpdate]):    @staticmethod    async def get_user_cart(            db: AsyncSession,            *,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> List[ShoppingCart]:        """Получение корзины пользователя"""        query = select(ShoppingCart).options(            selectinload(ShoppingCart.proxy_product)        )        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(                and_(                    ShoppingCart.session_id == session_id,                    ShoppingCart.expires_at > datetime.now()                )            )        else:            return []        result = await db.execute(query)        return list(result.scalars().all())    async def add_item(            self,            db: AsyncSession,            *,            user_id: Optional[int] = None,            session_id: Optional[str] = None,            proxy_product_id: int,            quantity: int = 1,            generation_params: Optional[str] = None    ) -> ShoppingCart:        """Добавление товара в корзину"""        # Проверяем, есть ли уже такой товар в корзине        existing_item = await self.get_cart_item(            db,            user_id=user_id,            session_id=session_id,            proxy_product_id=proxy_product_id        )        if existing_item:            # Обновляем количество            existing_item.quantity += quantity            existing_item.updated_at = datetime.now()            await db.commit()            await db.refresh(existing_item)            return existing_item        else:            # Создаем новый элемент корзины            cart_item = ShoppingCart(                user_id=user_id,                session_id=session_id,                proxy_product_id=proxy_product_id,                quantity=quantity,                generation_params=generation_params,                expires_at=datetime.now() + timedelta(hours=24) if session_id else None            )            db.add(cart_item)            await db.commit()            await db.refresh(cart_item)            return cart_item    async def add_to_cart(            self,            db: AsyncSession,            user_id: int,            proxy_product_id: int,            quantity: int = 1    ) -> ShoppingCart:        """Алиас для add_item для обратной совместимости"""        return await self.add_item(            db,            user_id=user_id,            proxy_product_id=proxy_product_id,            quantity=quantity        )    @staticmethod    async def get_cart_item(            db: AsyncSession,            *,            user_id: Optional[int] = None,            session_id: Optional[str] = None,            proxy_product_id: int    ) -> Optional[ShoppingCart]:        """Получение конкретного элемента корзины"""        query = select(ShoppingCart).where(            ShoppingCart.proxy_product_id == proxy_product_id        )        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(                and_(                    ShoppingCart.session_id == session_id,                    ShoppingCart.expires_at > datetime.now()                )            )        result = await db.execute(query)        return result.scalar_one_or_none()    @staticmethod    async def update_quantity(            db: AsyncSession,            *,            cart_item_id: int,            quantity: int,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> Optional[ShoppingCart]:        """Обновление количества товара в корзине"""        query = select(ShoppingCart).where(ShoppingCart.id == cart_item_id)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        result = await db.execute(query)        cart_item = result.scalar_one_or_none()        if cart_item:            cart_item.quantity = quantity            cart_item.updated_at = datetime.now()            await db.commit()            await db.refresh(cart_item)        return cart_item    @staticmethod    async def remove_item(            db: AsyncSession,            *,            cart_item_id: int,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> bool:        """Удаление товара из корзины"""        query = select(ShoppingCart).where(ShoppingCart.id == cart_item_id)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        result = await db.execute(query)        cart_item = result.scalar_one_or_none()        if cart_item:            await db.delete(cart_item)            await db.commit()            return True        return False    async def clear_user_cart(            self,            db: AsyncSession,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> bool:        """Очистка корзины пользователя"""        cart_items = await self.get_user_cart(db, user_id=user_id, session_id=session_id)        for item in cart_items:            await db.delete(item)        await db.commit()        return True    async def calculate_cart_total(            self,            db: AsyncSession,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> Decimal:        """Расчет общей стоимости корзины"""        cart_items = await self.get_user_cart(db, user_id=user_id, session_id=session_id)        total = Decimal('0.00')        for item in cart_items:            if item.proxy_product:                item_total = item.proxy_product.price_per_proxy * item.quantity                total += item_total        return total    @staticmethod    async def cleanup_expired_carts(db: AsyncSession) -> int:        """Очистка истекших корзин"""        query = select(ShoppingCart).where(            and_(                ShoppingCart.expires_at.isnot(None),                ShoppingCart.expires_at < datetime.now()            )        )        result = await db.execute(query)        expired_items = result.scalars().all()        count = 0        for item in expired_items:            await db.delete(item)            count += 1        await db.commit()        logger.info(f"Cleaned up {count} expired cart items")        return countshopping_cart_crud = CRUDShoppingCart(ShoppingCart)