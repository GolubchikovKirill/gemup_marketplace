from typing import List, Optionalfrom sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy import select, deletefrom sqlalchemy.orm import selectinloadfrom app.crud.base import CRUDBasefrom app.models.models import ShoppingCartfrom app.schemas.cart import CartItemCreate, CartItemUpdateclass CRUDShoppingCart(CRUDBase[ShoppingCart, CartItemCreate, CartItemUpdate]):    async def get_user_cart(            self,            db: AsyncSession,            *,            user_id: int    ) -> List[ShoppingCart]:        """Получение корзины зарегистрированного пользователя"""        result = await db.execute(            select(ShoppingCart)            .options(selectinload(ShoppingCart.proxy_product))            .where(ShoppingCart.user_id == user_id)            .order_by(ShoppingCart.created_at.desc())        )        return list(result.scalars().all())    async def get_guest_cart(            self,            db: AsyncSession,            *,            session_id: str    ) -> List[ShoppingCart]:        """Получение корзины гостевого пользователя"""        result = await db.execute(            select(ShoppingCart)            .options(selectinload(ShoppingCart.proxy_product))            .where(ShoppingCart.session_id == session_id)            .order_by(ShoppingCart.created_at.desc())        )        return list(result.scalars().all())    async def clear_user_cart(            self,            db: AsyncSession,            *,            user_id: int    ) -> bool:        """Очистка корзины зарегистрированного пользователя"""        try:            await db.execute(                delete(ShoppingCart).where(ShoppingCart.user_id == user_id)            )            await db.commit()            return True        except Exception:            await db.rollback()            return False    async def clear_guest_cart(            self,            db: AsyncSession,            *,            session_id: str    ) -> bool:        """Очистка корзины гостевого пользователя"""        try:            await db.execute(                delete(ShoppingCart).where(ShoppingCart.session_id == session_id)            )            await db.commit()            return True        except Exception:            await db.rollback()            return False    async def add_to_cart(            self,            db: AsyncSession,            *,            user_id: Optional[int] = None,            session_id: Optional[str] = None,            proxy_product_id: int,            quantity: int,            generation_params: Optional[str] = None    ) -> ShoppingCart:        """Добавление товара в корзину"""        # Проверяем, есть ли уже такой товар в корзине        existing_query = select(ShoppingCart).where(            ShoppingCart.proxy_product_id == proxy_product_id        )        if user_id:            existing_query = existing_query.where(ShoppingCart.user_id == user_id)        else:            existing_query = existing_query.where(ShoppingCart.session_id == session_id)        result = await db.execute(existing_query)        existing_item = result.scalar_one_or_none()        if existing_item:            # Обновляем количество            existing_item.quantity += quantity            await db.commit()            await db.refresh(existing_item)            return existing_item        else:            # Создаем новый элемент            cart_item_data = CartItemCreate(                user_id=user_id,                session_id=session_id,                proxy_product_id=proxy_product_id,                quantity=quantity,                generation_params=generation_params            )            return await self.create(db, obj_in=cart_item_data)shopping_cart_crud = CRUDShoppingCart(ShoppingCart)