from datetime import datetime, timedeltafrom typing import Optional, Listfrom sqlalchemy import select, and_from sqlalchemy.ext.asyncio import AsyncSessionfrom app.core.config import settingsfrom app.crud.base import CRUDBasefrom app.models.models import ShoppingCartfrom app.schemas.shopping_cart import ShoppingCartCreate, ShoppingCartUpdateclass CRUDShoppingCart(CRUDBase[ShoppingCart, ShoppingCartCreate, ShoppingCartUpdate]):    @staticmethod    async def get_user_cart(db: AsyncSession, *, user_id: int) -> List[ShoppingCart]:        """Получить корзину зарегистрированного пользователя"""        result = await db.execute(            select(ShoppingCart).where(ShoppingCart.user_id == user_id)        )        return result.scalars().all()    @staticmethod    async def get_guest_cart(db: AsyncSession, *, session_id: str) -> List[ShoppingCart]:        """Получить корзину гостевого пользователя"""        result = await db.execute(            select(ShoppingCart).where(                and_(                    ShoppingCart.session_id == session_id,                    ShoppingCart.expires_at > datetime.now()                )            )        )        return result.scalars().all()    @staticmethod    async def add_to_cart(            db: AsyncSession,            *,            user_id: Optional[int] = None,            session_id: Optional[str] = None,            proxy_product_id: int,            quantity: int = 1,            generation_params: Optional[str] = None    ) -> ShoppingCart:        """Добавить товар в корзину"""        # Проверяем, есть ли уже такой товар в корзине        existing_item = None        if user_id:            result = await db.execute(                select(ShoppingCart).where(                    and_(                        ShoppingCart.user_id == user_id,                        ShoppingCart.proxy_product_id == proxy_product_id                    )                )            )            existing_item = result.scalar_one_or_none()        elif session_id:            result = await db.execute(                select(ShoppingCart).where(                    and_(                        ShoppingCart.session_id == session_id,                        ShoppingCart.proxy_product_id == proxy_product_id,                        ShoppingCart.expires_at > datetime.now()                    )                )            )            existing_item = result.scalar_one_or_none()        if existing_item:            # Обновляем количество            existing_item.quantity += quantity            existing_item.updated_at = datetime.now()            if generation_params:                existing_item.generation_params = generation_params            await db.commit()            await db.refresh(existing_item)            return existing_item        else:            # Создаем новый элемент корзины            expires_at = None            if session_id and not user_id:                expires_at = datetime.now() + timedelta(hours=settings.guest_cart_expire_hours)            cart_item = ShoppingCart(                user_id=user_id,                session_id=session_id,                proxy_product_id=proxy_product_id,                quantity=quantity,                generation_params=generation_params,                expires_at=expires_at            )            db.add(cart_item)            await db.commit()            await db.refresh(cart_item)            return cart_item    @staticmethod    async def update_quantity(            db: AsyncSession,            *,            cart_item_id: int,            quantity: int,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> Optional[ShoppingCart]:        """Обновить количество товара в корзине"""        query = select(ShoppingCart).where(ShoppingCart.id == cart_item_id)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        result = await db.execute(query)        cart_item = result.scalar_one_or_none()        if cart_item:            if quantity <= 0:                await db.delete(cart_item)                await db.commit()                return None            else:                cart_item.quantity = quantity                cart_item.updated_at = datetime.now()                await db.commit()                await db.refresh(cart_item)            return cart_item        return None    @staticmethod    async def remove_from_cart(            db: AsyncSession,            *,            cart_item_id: int,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> bool:        """Удалить товар из корзины"""        query = select(ShoppingCart).where(ShoppingCart.id == cart_item_id)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        result = await db.execute(query)        cart_item = result.scalar_one_or_none()        if cart_item:            await db.delete(cart_item)            await db.commit()            return True        return False    @staticmethod    async def clear_cart(            db: AsyncSession,            *,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> bool:        """Очистить корзину"""        if user_id:            result = await db.execute(                select(ShoppingCart).where(ShoppingCart.user_id == user_id)            )        elif session_id:            result = await db.execute(                select(ShoppingCart).where(ShoppingCart.session_id == session_id)            )        else:            return False        items = result.scalars().all()        for item in items:            await db.delete(item)        await db.commit()        return True    async def calculate_cart_total(            self,            db: AsyncSession,            *,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> float:        """Рассчитать общую стоимость корзины"""        if user_id:            cart_items = await self.get_user_cart(db, user_id=user_id)        elif session_id:            cart_items = await self.get_guest_cart(db, session_id=session_id)        else:            return 0.0        total = 0.0        for item in cart_items:            if item.proxy_product and item.proxy_product.is_active:                total += float(item.proxy_product.price_per_proxy) * item.quantity        return total    @staticmethod    async def cleanup_expired_carts(db: AsyncSession) -> int:        """Очистить просроченные корзины гостей"""        result = await db.execute(            select(ShoppingCart).where(ShoppingCart.expires_at < datetime.now())        )        expired_items = result.scalars().all()        for item in expired_items:            await db.delete(item)        await db.commit()        return len(expired_items)shopping_cart_crud = CRUDShoppingCart(ShoppingCart)