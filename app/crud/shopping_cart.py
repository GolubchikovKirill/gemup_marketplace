from typing import List, Optionalfrom sqlalchemy import selectfrom sqlalchemy.ext.asyncio import AsyncSessionfrom app.crud.base import CRUDBasefrom app.models.models import ShoppingCartfrom app.schemas.cart import CartCreate, CartUpdateclass CRUDShoppingCart(CRUDBase[ShoppingCart, CartCreate, CartUpdate]):    @staticmethod    async def get_user_cart(            db: AsyncSession,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> List[ShoppingCart]:        """Получение корзины пользователя"""        query = select(ShoppingCart)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        else:            return []        result = await db.execute(query)        return result.scalars().all()    @staticmethod    async def get_user_cart_item(            db: AsyncSession,            cart_item_id: int,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> Optional[ShoppingCart]:        """Получение элемента корзины пользователя"""        query = select(ShoppingCart).where(ShoppingCart.id == cart_item_id)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        else:            return None        result = await db.execute(query)        return result.scalar_one_or_none()    @staticmethod    async def clear_user_cart(            db: AsyncSession,            user_id: Optional[int] = None,            session_id: Optional[str] = None    ) -> bool:        """Очистка корзины пользователя"""        query = select(ShoppingCart)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        else:            return False        result = await db.execute(query)        items = result.scalars().all()        for item in items:            await db.delete(item)        await db.commit()        return True    @staticmethod    async def get_cart_item(            db: AsyncSession,            user_id: Optional[int] = None,            session_id: Optional[str] = None,            product_id: int = None    ) -> Optional[ShoppingCart]:        """Получение элемента корзины по продукту"""        query = select(ShoppingCart).where(ShoppingCart.proxy_product_id == product_id)        if user_id:            query = query.where(ShoppingCart.user_id == user_id)        elif session_id:            query = query.where(ShoppingCart.session_id == session_id)        else:            return None        result = await db.execute(query)        return result.scalar_one_or_none()shopping_cart_crud = CRUDShoppingCart(ShoppingCart)