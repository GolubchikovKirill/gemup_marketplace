import uuidfrom datetime import datetime, timedeltafrom typing import Optional, Listfrom passlib.context import CryptContextfrom sqlalchemy import select, and_from sqlalchemy.ext.asyncio import AsyncSessionfrom app.core.config import settingsfrom app.crud.base import CRUDBasefrom app.models.models import Userfrom app.schemas.user import UserCreate, UserUpdatepwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")class CRUDUser(CRUDBase[User, UserCreate, UserUpdate]):    @staticmethod    def get_password_hash(password: str) -> str:        return pwd_context.hash(password)    @staticmethod    def verify_password(plain_password: str, hashed_password: str) -> bool:        return pwd_context.verify(plain_password, hashed_password)    async def create_registered_user(self, db: AsyncSession, *, user_in: UserCreate) -> User:        """Создание зарегистрированного пользователя"""        hashed_password = self.get_password_hash(user_in.password)        db_user = User(            email=str(user_in.email),  # Преобразование EmailStr в str            username=user_in.username,            hashed_password=hashed_password,            first_name=user_in.first_name,            last_name=user_in.last_name,            is_guest=False,            is_active=True        )        db.add(db_user)        await db.commit()        await db.refresh(db_user)        return db_user    @staticmethod    async def create_guest_user(db: AsyncSession, *, session_id: Optional[str] = None) -> User:        """Создание гостевого пользователя"""        if not session_id:            session_id = str(uuid.uuid4())        expires_at = datetime.now() + timedelta(hours=settings.guest_session_expire_hours)        db_user = User(            is_guest=True,            is_active=True,            guest_session_id=session_id,            guest_expires_at=expires_at        )        db.add(db_user)        await db.commit()        await db.refresh(db_user)        return db_user    @staticmethod    async def get_by_email(db: AsyncSession, *, email: str) -> Optional[User]:        result = await db.execute(select(User).where(User.email == email))        return result.scalar_one_or_none()    @staticmethod    async def get_by_username(db: AsyncSession, *, username: str) -> Optional[User]:        result = await db.execute(select(User).where(User.username == username))        return result.scalar_one_or_none()    @staticmethod    async def get_by_session_id(db: AsyncSession, *, session_id: str) -> Optional[User]:        result = await db.execute(            select(User).where(                and_(                    User.guest_session_id == session_id,                    User.is_guest.is_(True),                    User.guest_expires_at > datetime.now()                )            )        )        return result.scalar_one_or_none()    async def authenticate(self, db: AsyncSession, *, email: str, password: str) -> Optional[User]:        user = await self.get_by_email(db, email=email)        if not user:            return None        if not self.verify_password(password, user.hashed_password):            return None        return user    async def convert_guest_to_registered(            self,            db: AsyncSession,            *,            guest_user: User,            user_data: UserCreate    ) -> User:        """Конвертация гостевого пользователя в зарегистрированного"""        hashed_password = self.get_password_hash(user_data.password)        guest_user.email = str(user_data.email)  # Преобразование EmailStr в str        guest_user.username = user_data.username        guest_user.hashed_password = hashed_password        guest_user.first_name = user_data.first_name        guest_user.last_name = user_data.last_name        guest_user.is_guest = False        guest_user.guest_session_id = None        guest_user.guest_expires_at = None        await db.commit()        await db.refresh(guest_user)        return guest_user    @staticmethod    async def update_balance(db: AsyncSession, *, user: User, amount: float) -> User:        """Обновление баланса пользователя"""        from decimal import Decimal        user.balance += Decimal(str(amount))  # ИСПРАВЛЕНО: правильное преобразование        await db.commit()        await db.refresh(user)        return user    @staticmethod    async def get_active_users(db: AsyncSession, *, skip: int = 0, limit: int = 100) -> List[User]:        result = await db.execute(            select(User).where(User.is_active.is_(True)).offset(skip).limit(limit)        )        return list(result.scalars().all())user_crud = CRUDUser(User)