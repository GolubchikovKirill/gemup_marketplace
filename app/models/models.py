from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, ForeignKey, Enumfrom sqlalchemy.types import DECIMALfrom sqlalchemy.orm import relationshipfrom sqlalchemy.sql import funcfrom enum import Enum as PyEnumfrom app.core.db import Base# Енумы для типов данныхclass ProxyType(PyEnum):    HTTP = "http"    HTTPS = "https"    SOCKS4 = "socks4"    SOCKS5 = "socks5"class SessionType(PyEnum):    STICKY = "sticky"    ROTATING = "rotating"class OrderStatus(PyEnum):    PENDING = "pending"    PROCESSING = "processing"    COMPLETED = "completed"    CANCELLED = "cancelled"    EXPIRED = "expired"class TransactionType(PyEnum):    DEPOSIT = "deposit"    PURCHASE = "purchase"    REFUND = "refund"    WITHDRAWAL = "withdrawal"class TransactionStatus(PyEnum):    PENDING = "pending"    COMPLETED = "completed"    FAILED = "failed"    CANCELLED = "cancelled"class ProviderType(PyEnum):    PROVIDER_711 = "711"    PROXY_SELLER = "proxy_seller"    LIGHTNING = "lightning"    GOPROXY = "goproxy"# Основные моделиclass User(Base):    """Модель пользователя (включая гостевых через cookies)"""    __tablename__ = "users"    id = Column(Integer, primary_key=True, index=True)    email = Column(String(255), unique=True, index=True, nullable=True)  # Nullable для гостей    username = Column(String(100), unique=True, index=True, nullable=True)    hashed_password = Column(String(255), nullable=True)  # Nullable для гостей    first_name = Column(String(100), nullable=True)    last_name = Column(String(100), nullable=True)    # Баланс пользователя    balance = Column(DECIMAL(15, 8), default=0.00000000)  # Поддержка криптовалют    # Статусы и флаги    is_active = Column(Boolean, default=True)    is_verified = Column(Boolean, default=False)    is_guest = Column(Boolean, default=False)  # Гостевой аккаунт    # Временные данные для гостей    guest_session_id = Column(String(255), nullable=True, index=True)    guest_expires_at = Column(DateTime(timezone=True), nullable=True)    # Временные метки    created_at = Column(DateTime(timezone=True), server_default=func.now())    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())    last_login = Column(DateTime(timezone=True), nullable=True)    # Связи    orders = relationship("Order", back_populates="user")    transactions = relationship("Transaction", back_populates="user")    proxy_purchases = relationship("ProxyPurchase", back_populates="user")class ProxyProduct(Base):    """Продукты прокси от различных провайдеров"""    __tablename__ = "proxy_products"    id = Column(Integer, primary_key=True, index=True)    name = Column(String(200), nullable=False)    description = Column(Text, nullable=True)    # Технические характеристики    proxy_type = Column(Enum(ProxyType), nullable=False)    session_type = Column(Enum(SessionType), nullable=False)    provider = Column(Enum(ProviderType), nullable=False)    # Географические данные    country_code = Column(String(2), nullable=False)  # ISO код страны    country_name = Column(String(100), nullable=False)    city = Column(String(100), nullable=True)    # Ценообразование    price_per_proxy = Column(DECIMAL(10, 8), nullable=False)  # Цена за 1 прокси    min_quantity = Column(Integer, default=1)    max_quantity = Column(Integer, default=1000)    # Технические параметры    duration_days = Column(Integer, nullable=False)  # Срок действия    max_threads = Column(Integer, default=1)  # Максимальное количество потоков    bandwidth_limit_gb = Column(Integer, nullable=True)  # Лимит трафика    # Статусы    is_active = Column(Boolean, default=True)    is_featured = Column(Boolean, default=False)    stock_available = Column(Integer, default=0)  # Доступное количество    # Метаданные провайдера    provider_product_id = Column(String(255), nullable=True)  # ID в системе провайдера    provider_metadata = Column(Text, nullable=True)  # JSON с дополнительными данными    # Временные метки    created_at = Column(DateTime(timezone=True), server_default=func.now())    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())    # Связи    order_items = relationship("OrderItem", back_populates="proxy_product")    proxy_purchases = relationship("ProxyPurchase", back_populates="proxy_product")class Order(Base):    """Заказы пользователей"""    __tablename__ = "orders"    id = Column(Integer, primary_key=True, index=True)    order_number = Column(String(50), unique=True, nullable=False, index=True)    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)    # Финансовая информация    total_amount = Column(DECIMAL(15, 8), nullable=False)    currency = Column(String(10), default="USD")    # Статус и обработка    status = Column(Enum(OrderStatus), default=OrderStatus.PENDING)    payment_method = Column(String(50), nullable=True)    # Временные метки    created_at = Column(DateTime(timezone=True), server_default=func.now())    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())    expires_at = Column(DateTime(timezone=True), nullable=True)  # Срок действия заказа    # Связи    user = relationship("User", back_populates="orders")    order_items = relationship("OrderItem", back_populates="order", cascade="all, delete-orphan")    transactions = relationship("Transaction", back_populates="order")class OrderItem(Base):    """Элементы заказа"""    __tablename__ = "order_items"    id = Column(Integer, primary_key=True, index=True)    order_id = Column(Integer, ForeignKey("orders.id"), nullable=False)    proxy_product_id = Column(Integer, ForeignKey("proxy_products.id"), nullable=False)    # Количество и цены    quantity = Column(Integer, nullable=False, default=1)    unit_price = Column(DECIMAL(10, 8), nullable=False)    total_price = Column(DECIMAL(15, 8), nullable=False)    # Параметры генерации (для Stage 1)    generation_params = Column(Text, nullable=True)  # JSON с параметрами    # Связи    order = relationship("Order", back_populates="order_items")    proxy_product = relationship("ProxyProduct", back_populates="order_items")class Transaction(Base):    """Финансовые транзакции"""    __tablename__ = "transactions"    id = Column(Integer, primary_key=True, index=True)    transaction_id = Column(String(255), unique=True, nullable=False, index=True)    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)    order_id = Column(Integer, ForeignKey("orders.id"), nullable=True)    # Финансовая информация    amount = Column(DECIMAL(15, 8), nullable=False)    currency = Column(String(10), nullable=False)    transaction_type = Column(Enum(TransactionType), nullable=False)    status = Column(Enum(TransactionStatus), default=TransactionStatus.PENDING)    # Платежная система (Cryptomus)    payment_provider = Column(String(50), default="cryptomus")    external_transaction_id = Column(String(255), nullable=True)    payment_url = Column(String(500), nullable=True)    # Метаданные    description = Column(String(500), nullable=True)    metadata = Column(Text, nullable=True)  # JSON с дополнительными данными    # Временные метки    created_at = Column(DateTime(timezone=True), server_default=func.now())    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())    completed_at = Column(DateTime(timezone=True), nullable=True)    # Связи    user = relationship("User", back_populates="transactions")    order = relationship("Order", back_populates="transactions")class ProxyPurchase(Base):    """Приобретенные прокси (результат выполненного заказа)"""    __tablename__ = "proxy_purchases"    id = Column(Integer, primary_key=True, index=True)    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)    proxy_product_id = Column(Integer, ForeignKey("proxy_products.id"), nullable=False)    order_id = Column(Integer, ForeignKey("orders.id"), nullable=False)    # Данные доступа к прокси    proxy_list = Column(Text, nullable=False)  # JSON список прокси    username = Column(String(100), nullable=True)    password = Column(String(255), nullable=True)    # Статус и сроки    is_active = Column(Boolean, default=True)    expires_at = Column(DateTime(timezone=True), nullable=False)    # Использование    traffic_used_gb = Column(DECIMAL(10, 2), default=0.00)    last_used = Column(DateTime(timezone=True), nullable=True)    # Метаданные провайдера    provider_order_id = Column(String(255), nullable=True)    provider_metadata = Column(Text, nullable=True)    # Временные метки    created_at = Column(DateTime(timezone=True), server_default=func.now())    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())    # Связи    user = relationship("User", back_populates="proxy_purchases")    proxy_product = relationship("ProxyProduct", back_populates="proxy_purchases")class ShoppingCart(Base):    """Корзина покупок (для зарегистрированных и гостевых пользователей)"""    __tablename__ = "shopping_carts"    id = Column(Integer, primary_key=True, index=True)    user_id = Column(Integer, ForeignKey("users.id"), nullable=True)  # Nullable для гостей    session_id = Column(String(255), nullable=True, index=True)  # Для гостевых сессий    proxy_product_id = Column(Integer, ForeignKey("proxy_products.id"), nullable=False)    # Параметры товара    quantity = Column(Integer, nullable=False, default=1)    generation_params = Column(Text, nullable=True)  # JSON с параметрами генерации    # Временные метки    created_at = Column(DateTime(timezone=True), server_default=func.now())    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())    expires_at = Column(DateTime(timezone=True), nullable=True)  # Срок жизни для гостей    # Связи    user = relationship("User")    proxy_product = relationship("ProxyProduct")