from pydantic import BaseModel, Field, ConfigDictfrom typing import Optional, List, TYPE_CHECKINGfrom datetime import datetimefrom decimal import Decimalfrom app.models.models import OrderStatusif TYPE_CHECKING:    from app.schemas.proxy_product import ProxyProductPublic    from app.schemas.user import UserPublicclass OrderItemBase(BaseModel):    proxy_product_id: int    quantity: int = Field(..., ge=1)    unit_price: Decimal    total_price: Decimal    generation_params: Optional[str] = Noneclass OrderItemResponse(OrderItemBase):    model_config = ConfigDict(from_attributes=True)    id: int    proxy_product: Optional["ProxyProductPublic"] = Noneclass OrderBase(BaseModel):    total_amount: Decimal    currency: str = "USD"    payment_method: Optional[str] = Noneclass OrderCreate(BaseModel):    """Создание заказа из корзины"""    payment_method: Optional[str] = None    notes: Optional[str] = Noneclass OrderUpdate(BaseModel):    status: Optional[OrderStatus] = None    payment_method: Optional[str] = None    payment_id: Optional[str] = None    notes: Optional[str] = Noneclass OrderResponse(OrderBase):    model_config = ConfigDict(from_attributes=True)    id: int    order_number: str    user_id: int    status: OrderStatus    payment_id: Optional[str]    notes: Optional[str]    created_at: datetime    updated_at: datetime    expires_at: Optional[datetime]    # Связанные данные    order_items: List[OrderItemResponse] = []    user: Optional["UserPublic"] = Noneclass OrderPublic(BaseModel):    """Публичная информация о заказе"""    model_config = ConfigDict(from_attributes=True)    order_number: str    status: OrderStatus    total_amount: Decimal    currency: str    created_at: datetime    expires_at: Optional[datetime]class OrderStatusUpdate(BaseModel):    status: OrderStatus