from pydantic import BaseModel, Field, ConfigDictfrom typing import Optional, Listfrom datetime import datetimefrom decimal import Decimalfrom app.models.models import OrderStatusclass OrderItemBase(BaseModel):    proxy_product_id: int    quantity: int = Field(..., ge=1)    unit_price: Decimal    total_price: Decimal    generation_params: Optional[str] = Noneclass OrderItemResponse(OrderItemBase):    model_config = ConfigDict(from_attributes=True)    id: intclass OrderBase(BaseModel):    total_amount: Decimal    currency: str = "USD"    payment_method: Optional[str] = Noneclass OrderCreate(BaseModel):    payment_method: Optional[str] = None    notes: Optional[str] = Noneclass OrderUpdate(BaseModel):    status: Optional[OrderStatus] = None    payment_method: Optional[str] = None    payment_id: Optional[str] = None    notes: Optional[str] = Noneclass OrderResponse(OrderBase):    model_config = ConfigDict(from_attributes=True)    id: int    order_number: str    user_id: int    status: OrderStatus    payment_id: Optional[str] = None    notes: Optional[str] = None    created_at: datetime    updated_at: datetime    expires_at: Optional[datetime] = None    order_items: List[OrderItemResponse] = Field(default_factory=list)class OrderPublic(BaseModel):    model_config = ConfigDict(from_attributes=True)    order_number: str    status: OrderStatus    total_amount: Decimal    currency: str    created_at: datetime    expires_at: Optional[datetime] = Noneclass OrderStatusUpdate(BaseModel):    status: OrderStatus