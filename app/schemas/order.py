from datetime import datetimefrom decimal import Decimalfrom typing import Optionalfrom pydantic import BaseModel, Field, ConfigDict, field_serializerfrom app.models.models import OrderStatusclass OrderBase(BaseModel):    """Базовая схема заказа"""    total_amount: Decimal = Field(..., gt=0, description="Общая сумма заказа")    currency: str = Field(default="USD", description="Валюта")    notes: Optional[str] = Field(None, description="Примечания к заказу")class OrderCreate(OrderBase):    """Схема создания заказа"""    order_number: str = Field(..., description="Номер заказа")  # ДОБАВЛЕНО    user_id: int = Field(..., description="ID пользователя")    status: OrderStatus = Field(default=OrderStatus.PENDING, description="Статус заказа")class OrderUpdate(BaseModel):    """Схема обновления заказа"""    status: Optional[OrderStatus] = None    payment_method: Optional[str] = None    payment_id: Optional[str] = None    notes: Optional[str] = None    expires_at: Optional[datetime] = Noneclass OrderResponse(BaseModel):    """Схема ответа заказа"""    model_config = ConfigDict(from_attributes=True)    id: int    order_number: str    user_id: int    total_amount: Decimal    currency: str    status: OrderStatus    payment_method: Optional[str]    payment_id: Optional[str]    notes: Optional[str]    expires_at: Optional[datetime]    created_at: datetime    updated_at: datetime    @field_serializer('total_amount')    def serialize_amount(self, value: Decimal) -> str:        return f"{value:.8f}"    @field_serializer('created_at', 'updated_at', 'expires_at')    def serialize_datetime(self, value: Optional[datetime]) -> Optional[str]:        return value.isoformat() if value else None