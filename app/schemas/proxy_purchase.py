from datetime import datetimefrom decimal import Decimalfrom typing import Optional, Listfrom pydantic import BaseModel, Field, ConfigDict, field_serializerfrom app.models.models import ProxyType, ProxyCategoryclass ProxyPurchaseBase(BaseModel):    """Базовая схема покупки прокси"""    user_id: int    proxy_product_id: int    order_id: int    proxy_list: str    username: Optional[str] = None    password: Optional[str] = None    expires_at: datetime  # ИСПРАВЛЕНО: остается datetime    traffic_used_gb: Decimal = Field(default=Decimal('0.00'))    provider_order_id: Optional[str] = None    provider_metadata: Optional[str] = Noneclass ProxyPurchaseCreate(ProxyPurchaseBase):    """Схема создания покупки прокси"""    is_active: bool = Field(default=True)    # УБРАНО: все field_serializer - они вызывают проблемы с SQLite    # Pydantic будет автоматически обрабатывать типыclass ProxyPurchaseUpdate(BaseModel):    """Схема обновления покупки прокси"""    proxy_list: Optional[str] = None    username: Optional[str] = None    password: Optional[str] = None    is_active: Optional[bool] = None    expires_at: Optional[datetime] = None    traffic_used_gb: Optional[Decimal] = None    last_used: Optional[datetime] = None    provider_order_id: Optional[str] = None    provider_metadata: Optional[str] = Noneclass ProxyPurchaseResponse(BaseModel):    """Схема ответа покупки прокси"""    model_config = ConfigDict(from_attributes=True)    id: int    user_id: int    proxy_product_id: int    order_id: int    proxy_list: str    username: Optional[str]    password: Optional[str]    is_active: bool    expires_at: datetime    traffic_used_gb: Decimal    last_used: Optional[datetime]    provider_order_id: Optional[str]    provider_metadata: Optional[str]    created_at: datetime    updated_at: datetime    # ДОБАВЛЕНО: информация о продукте    product_name: Optional[str] = None    proxy_type: Optional[ProxyType] = None    proxy_category: Optional[ProxyCategory] = None    country_code: Optional[str] = None    country_name: Optional[str] = None    @field_serializer('traffic_used_gb')    def serialize_traffic(self, value: Decimal) -> str:        return f"{value:.2f}"    @field_serializer('expires_at', 'last_used', 'created_at', 'updated_at')    def serialize_datetime(self, value: Optional[datetime]) -> Optional[str]:        return value.isoformat() if value else Noneclass ProxyGenerationRequest(BaseModel):    """Запрос на генерацию списка прокси"""    format_type: str = Field(        default="ip:port:user:pass",        description="Формат вывода прокси"    )    include_auth: bool = Field(default=True, description="Включить авторизацию")    separator: str = Field(default="\n", description="Разделитель")class ProxyGenerationResponse(BaseModel):    """Ответ генерации списка прокси"""    purchase_id: int    proxy_count: int    format: str    proxies: List[str]    expires_at: datetime    generated_at: datetime = Field(default_factory=datetime.now)    @field_serializer('expires_at', 'generated_at')    def serialize_datetime(self, value: datetime) -> str:        return value.isoformat()class ProxyExtendRequest(BaseModel):    """Запрос на продление прокси"""    days: int = Field(..., ge=1, le=365, description="Количество дней для продления")class ProxyStatsResponse(BaseModel):    """Статистика использования прокси"""    total_proxies: int    active_proxies: int    expired_proxies: int    traffic_used_gb: Decimal    @field_serializer('traffic_used_gb')    def serialize_traffic(self, value: Decimal) -> str:        return f"{value:.2f}"