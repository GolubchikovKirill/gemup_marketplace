from pydantic import BaseModel, Field, ConfigDictfrom typing import Optional, Listfrom datetime import datetimefrom decimal import Decimalclass ProxyPurchaseBase(BaseModel):    user_id: int    proxy_product_id: int    order_id: int    proxy_list: str    username: Optional[str] = None    password: Optional[str] = None    expires_at: datetimeclass ProxyPurchaseCreate(ProxyPurchaseBase):    provider_order_id: Optional[str] = Noneclass ProxyPurchaseUpdate(BaseModel):    is_active: Optional[bool] = None    expires_at: Optional[datetime] = None    traffic_used_gb: Optional[Decimal] = None    last_used: Optional[datetime] = Noneclass ProxyPurchaseResponse(ProxyPurchaseBase):    model_config = ConfigDict(from_attributes=True)    id: int    is_active: bool    traffic_used_gb: Decimal    last_used: Optional[datetime]    provider_order_id: Optional[str]    created_at: datetime    updated_at: datetimeclass ProxyGenerationRequest(BaseModel):    format_type: str = Field(default="ip:port:user:pass", description="Формат вывода")class ProxyGenerationResponse(BaseModel):    purchase_id: int    proxy_count: int    format: str    expires_at: datetime    proxies: List[str]class ProxyExtendRequest(BaseModel):    days: int = Field(..., ge=1, le=365, description="Количество дней для продления")