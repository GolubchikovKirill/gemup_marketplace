from pydantic import BaseModel, Field, ConfigDictfrom typing import Optional, List, Dict, Anyfrom datetime import datetimefrom decimal import Decimalfrom app.schemas.proxy_product import ProxyProductPublicfrom app.schemas.order import OrderPublicclass ProxyPurchaseBase(BaseModel):    proxy_list: str = Field(..., description="JSON список прокси")    username: Optional[str] = None    password: Optional[str] = None    expires_at: datetimeclass ProxyPurchaseCreate(ProxyPurchaseBase):    user_id: int    proxy_product_id: int    order_id: int    provider_order_id: Optional[str] = None    provider_metadata: Optional[str] = Noneclass ProxyPurchaseUpdate(BaseModel):    is_active: Optional[bool] = None    traffic_used_gb: Optional[Decimal] = None    last_used: Optional[datetime] = None    provider_metadata: Optional[str] = Noneclass ProxyPurchaseResponse(ProxyPurchaseBase):    model_config = ConfigDict(from_attributes=True)    id: int    user_id: int    proxy_product_id: int    order_id: int    is_active: bool    traffic_used_gb: Decimal    last_used: Optional[datetime]    provider_order_id: Optional[str]    provider_metadata: Optional[str]    created_at: datetime    updated_at: datetime    proxy_product: Optional[ProxyProductPublic] = None    order: Optional[OrderPublic] = Noneclass ProxyListResponse(BaseModel):    proxies: List[Dict[str, Any]]    total_count: int    format_type: str    expires_at: datetimeclass ProxyGenerationRequest(BaseModel):    purchase_id: int    format_type: str = Field(default="ip:port:user:pass")    include_auth: bool = Field(default=True)    separator: str = Field(default="\n")