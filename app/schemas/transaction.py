from datetime import datetimefrom decimal import Decimalfrom typing import Optionalfrom pydantic import BaseModel, Field, ConfigDict, field_serializerfrom app.models.models import TransactionType, TransactionStatusclass TransactionBase(BaseModel):    """Базовая схема транзакции"""    amount: Decimal = Field(..., gt=0, description="Сумма транзакции")    currency: str = Field(default="USD", description="Валюта")    transaction_type: TransactionType = Field(..., description="Тип транзакции")    description: Optional[str] = Field(None, description="Описание транзакции")class TransactionCreate(TransactionBase):    """Схема создания транзакции"""    user_id: int = Field(..., description="ID пользователя")    order_id: Optional[int] = Field(None, description="ID заказа")    payment_provider: str = Field(default="cryptomus", description="Платежный провайдер")    external_transaction_id: Optional[str] = Field(None, description="Внешний ID транзакции")    payment_url: Optional[str] = Field(None, description="URL для оплаты")    provider_metadata: Optional[str] = Field(None, description="Метаданные провайдера")class TransactionUpdate(BaseModel):    """Схема обновления транзакции"""    status: Optional[TransactionStatus] = Field(None, description="Статус транзакции")    external_transaction_id: Optional[str] = Field(None, description="Внешний ID транзакции")    payment_url: Optional[str] = Field(None, description="URL для оплаты")    provider_metadata: Optional[str] = Field(None, description="Метаданные провайдера")    completed_at: Optional[datetime] = Field(None, description="Время завершения")class PaymentCreateRequest(BaseModel):    """Запрос на создание платежа"""    amount: Decimal = Field(..., gt=0, description="Сумма платежа")    currency: str = Field(default="USD", description="Валюта")    description: Optional[str] = Field(None, description="Описание платежа")class PaymentResponse(BaseModel):    """Ответ при создании платежа"""    transaction_id: str    payment_url: str    amount: str    currency: str    status: str    expires_at: Optional[datetime] = None    @field_serializer('expires_at')    def serialize_expires_at(self, value: Optional[datetime]) -> Optional[str]:        return value.isoformat() if value else Noneclass TransactionResponse(BaseModel):    """Схема ответа транзакции"""    model_config = ConfigDict(from_attributes=True)    id: int    transaction_id: str    user_id: int    order_id: Optional[int]    amount: Decimal    currency: str    transaction_type: TransactionType    status: TransactionStatus    payment_provider: str    external_transaction_id: Optional[str]    payment_url: Optional[str]    description: Optional[str]    provider_metadata: Optional[str]    created_at: datetime    updated_at: datetime    completed_at: Optional[datetime]    @field_serializer('amount')    def serialize_amount(self, value: Decimal) -> str:        return f"{value:.8f}"    @field_serializer('created_at', 'updated_at', 'completed_at')    def serialize_datetime(self, value: Optional[datetime]) -> Optional[str]:        return value.isoformat() if value else Noneclass WebhookData(BaseModel):    """Данные webhook от платежной системы"""    order_id: str    status: str    amount: str    currency: str    txid: Optional[str] = None    signature: Optional[str] = None    timestamp: Optional[str] = None