"""Схемы для финансовых транзакций - оптимизировано для MVP.Содержит схемы для работы с транзакциями, платежами и webhook-уведомлениями."""from datetime import datetimefrom decimal import Decimalfrom typing import Optional, Listfrom pydantic import BaseModel, Field, ConfigDict, field_serializer, field_validatorfrom app.models.models import TransactionType, TransactionStatusclass TransactionBase(BaseModel):    """Базовая схема транзакции."""    amount: Decimal = Field(..., description="Сумма транзакции")    currency: str = Field("USD", max_length=3, description="Валюта транзакции")    transaction_type: TransactionType = Field(..., description="Тип транзакции")    description: Optional[str] = Field(None, max_length=500, description="Описание транзакции")    @field_validator('amount')    @classmethod    def validate_amount(cls, v: Decimal) -> Decimal:        """Валидация суммы транзакции."""        if v == 0:            raise ValueError('Transaction amount cannot be zero')        if abs(v) > Decimal('100000.00000000'):            raise ValueError('Transaction amount cannot exceed 100,000.00000000')        return vclass TransactionCreate(TransactionBase):    """Схема создания транзакции."""    user_id: int = Field(..., gt=0, description="ID пользователя")    order_id: Optional[int] = Field(None, gt=0, description="ID связанного заказа")    payment_method: str = Field(..., description="Метод платежа")    provider_payment_id: Optional[str] = Field(None, max_length=255, description="ID транзакции провайдера")    provider_metadata: Optional[str] = Field(None, description="Метаданные провайдера в JSON формате")class TransactionUpdate(BaseModel):    """Схема обновления транзакции."""    status: Optional[TransactionStatus] = Field(None, description="Новый статус транзакции")    provider_payment_id: Optional[str] = Field(None, max_length=255, description="ID транзакции провайдера")    provider_metadata: Optional[str] = Field(None, description="Обновленные метаданные провайдера")    processed_at: Optional[datetime] = Field(None, description="Время обработки транзакции")class TransactionResponse(BaseModel):    """Схема ответа транзакции."""    model_config = ConfigDict(from_attributes=True)    id: int    user_id: int    order_id: Optional[int] = None    amount: Decimal    currency: str    transaction_type: TransactionType    status: TransactionStatus    payment_method: str    description: Optional[str] = None    provider_payment_id: Optional[str] = None    provider_metadata: Optional[str] = None    processed_at: Optional[datetime] = None    created_at: datetime    updated_at: datetime    @field_serializer('amount')    def serialize_amount(self, value: Decimal) -> str:        """Сериализация суммы с высокой точностью."""        return f"{value:.8f}"    @field_serializer('created_at', 'updated_at', 'processed_at')    def serialize_datetime(self, value: Optional[datetime]) -> Optional[str]:        """Сериализация datetime в ISO формат."""        return value.isoformat() if value else Noneclass TransactionListResponse(BaseModel):    """Схема списка транзакций с пагинацией."""    transactions: List[TransactionResponse] = Field(..., description="Список транзакций")    total: int = Field(..., ge=0, description="Общее количество транзакций")    page: int = Field(..., ge=1, description="Текущая страница")    per_page: int = Field(..., ge=1, le=100, description="Размер страницы")    pages: int = Field(..., ge=1, description="Общее количество страниц")# Алиасы для совместимости с существующими роутамиPaymentCreateRequest = TransactionCreatePaymentResponse = TransactionResponseWebhookData = TransactionResponse