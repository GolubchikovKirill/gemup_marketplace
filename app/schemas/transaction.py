from pydantic import BaseModel, Field, ConfigDictfrom typing import Optionalfrom datetime import datetimefrom decimal import Decimalfrom app.models.models import TransactionType, TransactionStatusclass TransactionBase(BaseModel):    amount: Decimal = Field(..., gt=0)    currency: str = Field(default="USD", max_length=10)    transaction_type: TransactionType    description: Optional[str] = Field(None, max_length=500)class TransactionCreate(TransactionBase):    user_id: int    order_id: Optional[int] = None    payment_provider: str = Field(default="cryptomus", max_length=50)class TransactionUpdate(BaseModel):    status: Optional[TransactionStatus] = None    external_transaction_id: Optional[str] = None    payment_url: Optional[str] = None    description: Optional[str] = Noneclass TransactionResponse(TransactionBase):    model_config = ConfigDict(from_attributes=True)    id: int    transaction_id: str    user_id: int    order_id: Optional[int]    status: TransactionStatus    payment_provider: str    external_transaction_id: Optional[str]    payment_url: Optional[str]    created_at: datetime    updated_at: datetime    completed_at: Optional[datetime]class PaymentCreateRequest(BaseModel):    amount: Decimal = Field(..., gt=0, description="Сумма пополнения")    currency: str = Field(default="USD", description="Валюта")    description: Optional[str] = Field(None, description="Описание платежа")class PaymentResponse(BaseModel):    transaction_id: str    payment_url: str    amount: Decimal    currency: str    status: str    expires_at: datetimeclass WebhookData(BaseModel):    order_id: str    status: str    amount: str    currency: str    sign: str    # Дополнительные поля от Cryptomus    uuid: Optional[str] = None    network: Optional[str] = None    address: Optional[str] = None    txid: Optional[str] = None