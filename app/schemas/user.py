"""Схемы для пользователей - оптимизировано для MVP.Содержит все схемы для работы с пользователями:регистрация, аутентификация, профили, статистика."""from typing import Optional, List, Dict, Anyfrom datetime import datetimefrom decimal import Decimalfrom pydantic import BaseModel, Field, EmailStr, ConfigDict, field_validator, field_serializerclass UserBase(BaseModel):    """Базовая схема пользователя."""    email: Optional[EmailStr] = Field(None, description="Email пользователя")    username: Optional[str] = Field(None, min_length=3, max_length=50, description="Имя пользователя")    first_name: Optional[str] = Field(None, max_length=100, description="Имя")    last_name: Optional[str] = Field(None, max_length=100, description="Фамилия")class UserCreate(UserBase):    """Схема создания пользователя."""    email: EmailStr = Field(..., description="Email пользователя")    username: str = Field(..., min_length=3, max_length=50, description="Имя пользователя")    password: str = Field(..., min_length=8, description="Пароль")    first_name: Optional[str] = Field(None, max_length=100, description="Имя")    last_name: Optional[str] = Field(None, max_length=100, description="Фамилия")    @field_validator('password')    @classmethod    def validate_password_complexity(cls, v: str) -> str:        """Валидация сложности пароля."""        if not any(c.isupper() for c in v):            raise ValueError('Password must contain at least one uppercase letter')        if not any(c.islower() for c in v):            raise ValueError('Password must contain at least one lowercase letter')        if not any(c.isdigit() for c in v):            raise ValueError('Password must contain at least one digit')        return vclass UserUpdate(BaseModel):    """Схема обновления пользователя."""    email: Optional[EmailStr] = Field(None, description="Новый email")    username: Optional[str] = Field(None, min_length=3, max_length=50, description="Новое имя пользователя")    first_name: Optional[str] = Field(None, max_length=100, description="Новое имя")    last_name: Optional[str] = Field(None, max_length=100, description="Новая фамилия")class UserLogin(BaseModel):    """Схема входа пользователя."""    email: EmailStr = Field(..., description="Email пользователя")    password: str = Field(..., description="Пароль")class UserResponse(BaseModel):    """Схема ответа пользователя."""    model_config = ConfigDict(from_attributes=True)    id: int    email: Optional[str] = None    username: Optional[str] = None    first_name: Optional[str] = None    last_name: Optional[str] = None    is_active: bool = True    is_verified: bool = False    is_guest: bool = False    is_admin: bool = False    role: str = "user"    balance: Decimal = Decimal('0.00000000')    guest_session_id: Optional[str] = None    last_login: Optional[datetime] = None    created_at: Optional[datetime] = None    updated_at: Optional[datetime] = None    @field_serializer('balance')    def serialize_balance(self, value: Decimal) -> str:        return f"{value:.8f}"    @field_serializer('last_login', 'created_at', 'updated_at')    def serialize_datetime(self, value: Optional[datetime]) -> Optional[str]:        return value.isoformat() if value else Noneclass UserBalanceResponse(BaseModel):    """Схема ответа баланса пользователя - КЛЮЧЕВОЕ для MVP."""    balance: str = Field(..., description="Текущий баланс")    currency: str = Field("USD", description="Валюта")    user_id: int = Field(..., description="ID пользователя")    is_guest: bool = Field(..., description="Гостевой пользователь")    formatted_balance: str = Field(..., description="Отформатированный баланс")    last_updated: Optional[str] = Field(None, description="Последнее обновление")    # ДОБАВЛЕНО для MVP: информация о пополнениях    pending_topups: str = Field("0.00000000", description="Ожидающие пополнения")    total_deposited: str = Field("0.00000000", description="Всего пополнено")class UserStatsResponse(BaseModel):    """Схема статистики пользователя - для раздела "Мои покупки"."""    total_orders: int = Field(0, description="Общее количество заказов")    total_spent: str = Field("0.00000000", description="Общая потраченная сумма")    active_proxies: int = Field(0, description="Активные прокси")    last_order_date: Optional[str] = Field(None, description="Дата последнего заказа")    registration_date: Optional[str] = Field(None, description="Дата регистрации")    days_since_registration: int = Field(0, description="Дней с регистрации")    average_order_amount: str = Field("0.00000000", description="Средняя сумма заказа")    total_proxies_purchased: int = Field(0, description="Всего куплено прокси")    period_days: int = Field(30, description="Период статистики")    currency: str = Field("USD", description="Валюта")class UserListResponse(BaseModel):    """Схема списка пользователей."""    users: List[UserResponse] = Field(default_factory=list, description="Список пользователей")    total: int = Field(0, description="Общее количество")    page: int = Field(1, description="Текущая страница")    per_page: int = Field(20, description="Записей на странице")    pages: int = Field(0, description="Общее количество страниц")class TokenResponse(BaseModel):    """Схема ответа с токеном."""    access_token: str = Field(..., description="Токен доступа")    token_type: str = Field("bearer", description="Тип токена")    expires_in: int = Field(..., description="Время жизни токена в секундах")    refresh_token: Optional[str] = Field(None, description="Токен обновления")    user: UserResponse = Field(..., description="Данные пользователя")class PasswordChangeRequest(BaseModel):    """Схема запроса смены пароля."""    old_password: str = Field(..., min_length=8, description="Текущий пароль")    new_password: str = Field(..., min_length=8, description="Новый пароль")    @field_validator('new_password')    @classmethod    def validate_password_complexity(cls, v: str) -> str:        """Валидация сложности пароля."""        if not any(c.isupper() for c in v):            raise ValueError('Password must contain at least one uppercase letter')        if not any(c.islower() for c in v):            raise ValueError('Password must contain at least one lowercase letter')        if not any(c.isdigit() for c in v):            raise ValueError('Password must contain at least one digit')        return vclass PasswordResetRequest(BaseModel):    """Схема запроса сброса пароля."""    email: EmailStr = Field(..., description="Email для сброса пароля")class PasswordResetConfirm(BaseModel):    """Схема подтверждения сброса пароля."""    token: str = Field(..., description="Токен сброса пароля")    new_password: str = Field(..., min_length=8, description="Новый пароль")    @field_validator('new_password')    @classmethod    def validate_password_complexity(cls, v: str) -> str:        """Валидация сложности пароля."""        if not any(c.isupper() for c in v):            raise ValueError('Password must contain at least one uppercase letter')        if not any(c.islower() for c in v):            raise ValueError('Password must contain at least one lowercase letter')        if not any(c.isdigit() for c in v):            raise ValueError('Password must contain at least one digit')        return v# ДОБАВЛЕНО для MVP: Схемы для гостевых пользователейclass GuestUserCreate(BaseModel):    """Схема создания гостевого пользователя - покупки без регистрации."""    session_id: str = Field(..., min_length=10, max_length=255, description="ID сессии")class GuestToRegisteredRequest(BaseModel):    """Схема конвертации гостя в зарегистрированного пользователя."""    email: EmailStr = Field(..., description="Email для регистрации")    username: str = Field(..., min_length=3, max_length=50, description="Имя пользователя")    password: str = Field(..., min_length=8, description="Пароль")    first_name: Optional[str] = Field(None, max_length=100, description="Имя")    last_name: Optional[str] = Field(None, max_length=100, description="Фамилия")    @field_validator('password')    @classmethod    def validate_password_complexity(cls, v: str) -> str:        if not any(c.isupper() for c in v):            raise ValueError('Password must contain at least one uppercase letter')        if not any(c.islower() for c in v):            raise ValueError('Password must contain at least one lowercase letter')        if not any(c.isdigit() for c in v):            raise ValueError('Password must contain at least one digit')        return v# ДОБАВЛЕНО для MVP: Схемы для пополнения балансаclass BalanceTopupRequest(BaseModel):    """Схема запроса пополнения баланса - КЛЮЧЕВОЕ для MVP."""    amount: Decimal = Field(..., gt=0, le=10000, description="Сумма пополнения")    payment_method: str = Field("cryptomus", description="Метод оплаты")    currency: str = Field("USD", description="Валюта")    @field_validator('amount')    @classmethod    def validate_amount(cls, v: Decimal) -> Decimal:        if v < Decimal('1.00'):            raise ValueError('Minimum topup amount is $1.00')        if v > Decimal('10000.00'):            raise ValueError('Maximum topup amount is $10,000.00')        return vclass BalanceTopupResponse(BaseModel):    """Схема ответа пополнения баланса."""    topup_id: int = Field(..., description="ID пополнения")    amount: str = Field(..., description="Сумма пополнения")    currency: str = Field(..., description="Валюта")    payment_method: str = Field(..., description="Метод оплаты")    payment_url: Optional[str] = Field(None, description="URL для оплаты")    status: str = Field(..., description="Статус пополнения")    created_at: str = Field(..., description="Время создания")    expires_at: Optional[str] = Field(None, description="Время истечения")class BalanceHistoryResponse(BaseModel):    """Схема истории баланса - для интерфейса пополнения."""    transactions: List[Dict[str, Any]] = Field(default_factory=list, description="Список транзакций")    total: int = Field(0, description="Общее количество")    page: int = Field(1, description="Текущая страница")    per_page: int = Field(20, description="Записей на странице")    # Сводная информация    total_deposited: str = Field("0.00000000", description="Всего пополнено")    total_spent: str = Field("0.00000000", description="Всего потрачено")    current_balance: str = Field("0.00000000", description="Текущий баланс")class UserActivityResponse(BaseModel):    """Схема активности пользователя."""    user_id: int = Field(..., description="ID пользователя")    period_days: int = Field(..., description="Период в днях")    orders_count: int = Field(0, description="Количество заказов")    transactions_count: int = Field(0, description="Количество транзакций")    proxies_used: int = Field(0, description="Использованные прокси")    last_activity: Optional[str] = Field(None, description="Последняя активность")    activity_score: float = Field(0.0, description="Оценка активности")class UserExportResponse(BaseModel):    """Схема экспорта данных пользователя."""    user_id: int = Field(..., description="ID пользователя")    export_date: str = Field(..., description="Дата экспорта")    format: str = Field("json", description="Формат экспорта")    data: Dict[str, Any] = Field(..., description="Экспортированные данные")    size_bytes: int = Field(..., description="Размер данных в байтах")