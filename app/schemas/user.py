"""Схемы для пользователей.Содержит все схемы для работы с пользователями:зарегистрированными, гостевыми, аутентификацией и профилями."""from typing import Optionalfrom datetime import datetimefrom decimal import Decimalfrom pydantic import BaseModel, Field, EmailStr, ConfigDict, field_validator, field_serializerfrom app.models.models import UserRoleclass UserBase(BaseModel):    """Базовая схема пользователя."""    email: Optional[EmailStr] = Field(None, description="Email пользователя")    username: Optional[str] = Field(None, min_length=3, max_length=50, description="Имя пользователя")    first_name: Optional[str] = Field(None, max_length=100, description="Имя")    last_name: Optional[str] = Field(None, max_length=100, description="Фамилия")class UserCreate(UserBase):    """Схема создания пользователя."""    email: EmailStr = Field(..., description="Email пользователя")    username: str = Field(..., min_length=3, max_length=50, description="Имя пользователя")    password: str = Field(..., min_length=8, max_length=128, description="Пароль")    first_name: str = Field(..., min_length=1, max_length=100, description="Имя")    last_name: str = Field(..., min_length=1, max_length=100, description="Фамилия")    @field_validator('password')    @classmethod    def validate_password(cls, v: str) -> str:        """Валидация пароля."""        if len(v) < 8:            raise ValueError('Password must be at least 8 characters long')        if not any(c.isupper() for c in v):            raise ValueError('Password must contain at least one uppercase letter')        if not any(c.islower() for c in v):            raise ValueError('Password must contain at least one lowercase letter')        if not any(c.isdigit() for c in v):            raise ValueError('Password must contain at least one digit')        return vclass UserUpdate(BaseModel):    """Схема обновления пользователя."""    email: Optional[EmailStr] = None    username: Optional[str] = Field(None, min_length=3, max_length=50)    first_name: Optional[str] = Field(None, max_length=100)    last_name: Optional[str] = Field(None, max_length=100)    is_active: Optional[bool] = Noneclass UserResponse(BaseModel):    """Схема ответа пользователя."""    model_config = ConfigDict(from_attributes=True)    id: int    email: Optional[str]    username: Optional[str]    first_name: Optional[str]    last_name: Optional[str]    is_active: bool    is_verified: bool    is_guest: bool    is_admin: bool    role: UserRole    balance: Decimal    created_at: datetime    updated_at: datetime    last_login: Optional[datetime] = None    @field_serializer('balance')    def serialize_balance(self, value: Decimal) -> str:        return f"{value:.8f}"    @field_serializer('created_at', 'updated_at', 'last_login')    def serialize_datetime(self, value: Optional[datetime]) -> Optional[str]:        return value.isoformat() if value else Noneclass UserLogin(BaseModel):    """Схема входа пользователя."""    email: EmailStr = Field(..., description="Email пользователя")    password: str = Field(..., min_length=1, description="Пароль")class UserBalanceResponse(BaseModel):    """Схема ответа баланса пользователя."""    user_id: int    balance: str = Field(..., description="Баланс в формате строки")    currency: str = Field(default="USD", description="Валюта")    is_guest: bool = Field(..., description="Гостевой пользователь")class PasswordChangeRequest(BaseModel):    """Запрос смены пароля."""    current_password: str = Field(..., description="Текущий пароль")    new_password: str = Field(..., min_length=8, description="Новый пароль")    @field_validator('new_password')    @classmethod    def validate_new_password(cls, v: str) -> str:        """Валидация нового пароля."""        if len(v) < 8:            raise ValueError('Password must be at least 8 characters long')        return vclass PasswordResetRequest(BaseModel):    """Запрос сброса пароля."""    email: EmailStr = Field(..., description="Email для сброса пароля")class PasswordResetConfirm(BaseModel):    """Подтверждение сброса пароля."""    token: str = Field(..., description="Токен сброса")    new_password: str = Field(..., min_length=8, description="Новый пароль")class GuestUserCreate(BaseModel):    """Схема создания гостевого пользователя."""    session_id: Optional[str] = Field(None, description="ID сессии")    expires_in_hours: int = Field(24, ge=1, le=168, description="Время жизни в часах")class ConvertGuestRequest(UserCreate):    """Запрос конвертации гостя в зарегистрированного пользователя."""    passclass UserStatsResponse(BaseModel):    """Статистика пользователя."""    total_orders: int    total_spent: str    active_proxies: int    total_proxies: int    registration_date: datetime    last_activity: Optional[datetime]    @field_serializer('registration_date', 'last_activity')    def serialize_datetime(self, value: Optional[datetime]) -> Optional[str]:        return value.isoformat() if value else None