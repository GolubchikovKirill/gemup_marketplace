from pydantic import BaseModel, EmailStr, Field, field_validator, ConfigDictfrom typing import Optionalfrom datetime import datetimefrom decimal import Decimalclass UserBase(BaseModel):    email: Optional[EmailStr] = None    username: Optional[str] = Field(None, min_length=3, max_length=100)    first_name: Optional[str] = Field(None, max_length=100)    last_name: Optional[str] = Field(None, max_length=100)class UserCreate(BaseModel):    email: EmailStr    username: str = Field(..., min_length=3, max_length=100)    password: str = Field(..., min_length=8, max_length=128)    first_name: Optional[str] = Field(None, max_length=100)    last_name: Optional[str] = Field(None, max_length=100)    @classmethod    @field_validator('username')    def username_alphanumeric(cls, v: str) -> str:        if not v.replace('_', '').replace('-', '').isalnum():            raise ValueError('Username must be alphanumeric with optional _ or -')        return v    @classmethod    @field_validator('password')    def validate_password(cls, v: str) -> str:        if len(v) < 8:            raise ValueError('Password must be at least 8 characters long')        if not any(c.isupper() for c in v):            raise ValueError('Password must contain at least one uppercase letter')        if not any(c.islower() for c in v):            raise ValueError('Password must contain at least one lowercase letter')        if not any(c.isdigit() for c in v):            raise ValueError('Password must contain at least one digit')        return vclass UserUpdate(BaseModel):    email: Optional[EmailStr] = None    username: Optional[str] = Field(None, min_length=3, max_length=100)    first_name: Optional[str] = Field(None, max_length=100)    last_name: Optional[str] = Field(None, max_length=100)    password: Optional[str] = Field(None, min_length=8, max_length=128)class UserLogin(BaseModel):    email: EmailStr    password: strclass UserResponse(UserBase):    model_config = ConfigDict(from_attributes=True)    id: int    balance: Decimal    is_active: bool    is_verified: bool    is_guest: bool    created_at: datetime    updated_at: datetime    last_login: Optional[datetime] = Noneclass UserPublic(BaseModel):    """Публичная информация о пользователе"""    model_config = ConfigDict(from_attributes=True)    id: int    username: Optional[str]    first_name: Optional[str]    last_name: Optional[str]    is_verified: boolclass GuestUserCreate(BaseModel):    session_id: Optional[str] = Noneclass GuestUserResponse(BaseModel):    model_config = ConfigDict(from_attributes=True)    id: int    session_id: str    expires_at: datetime    balance: Decimalclass UserBalanceUpdate(BaseModel):    amount: Decimal = Field(..., description="Сумма для изменения баланса (может быть отрицательной)")