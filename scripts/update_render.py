#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è render.yaml
"""

import yaml
import os


def update_render_yaml():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç render.yaml –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DATABASE_URL"""

    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    with open('render.yaml', 'r') as file:
        config = yaml.safe_load(file)

    # –ù–∞—Ö–æ–¥–∏–º backend service
    for service in config['services']:
        if service['name'] == 'gemup-marketplace-backend':
            # –û–±–Ω–æ–≤–ª—è–µ–º env –Ω–∞ python
            service['env'] = 'python'

            # –£–±–∏—Ä–∞–µ–º Docker –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if 'dockerfilePath' in service:
                del service['dockerfilePath']
            if 'dockerContext' in service:
                del service['dockerContext']
            if 'dockerCommand' in service:
                del service['dockerCommand']

            # –î–æ–±–∞–≤–ª—è–µ–º Python –∫–æ–º–∞–Ω–¥—ã
            service['buildCommand'] = 'pip install -r requirements.txt'
            service['startCommand'] = 'python main.py'

            # –û–±–Ω–æ–≤–ª—è–µ–º environment variables
            env_vars = service.get('envVars', [])

            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ PostgreSQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            env_vars = [var for var in env_vars if var['key'] not in [
                'POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_USER',
                'POSTGRES_PASSWORD', 'POSTGRES_DB'
            ]]

            # –î–æ–±–∞–≤–ª—è–µ–º DATABASE_URL
            env_vars.append({
                'key': 'DATABASE_URL',
                'fromDatabase': {
                    'name': 'gemup-marketplace-db',
                    'property': 'connectionString'
                }
            })

            service['envVars'] = env_vars
            print("‚úÖ Backend service updated")
            break

    # –ù–∞—Ö–æ–¥–∏–º frontend service
    for service in config['services']:
        if service['name'] == 'gemup-marketplace-frontend':
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ Node.js
            service['env'] = 'node'

            # –£–±–∏—Ä–∞–µ–º Docker –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if 'dockerfilePath' in service:
                del service['dockerfilePath']
            if 'dockerContext' in service:
                del service['dockerContext']

            # –î–æ–±–∞–≤–ª—è–µ–º Node.js –∫–æ–º–∞–Ω–¥—ã
            service['buildCommand'] = 'cd nextjs && npm ci && npm run build'
            service['startCommand'] = 'cd nextjs && npm start'

            print("‚úÖ Frontend service updated")
            break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('render.yaml', 'w') as file:
        yaml.dump(config, file, default_flow_style=False, indent=2)

    print("üéâ render.yaml successfully updated!")


if __name__ == "__main__":
    if not os.path.exists('render.yaml'):
        print("‚ùå render.yaml file not found!")
        exit(1)

    update_render_yaml()
