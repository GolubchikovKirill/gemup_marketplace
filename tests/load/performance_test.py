"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
"""

import asyncio
import time

import aiohttp


class PerformanceTest:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url

    async def ramp_up_test(self, max_users: int = 100, ramp_duration: int = 60):
        """–¢–µ—Å—Ç —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
        print(f"üìà Ramp-up test: 0 ‚Üí {max_users} users over {ramp_duration}s")

        start_time = time.time()
        users_per_second = max_users / ramp_duration

        tasks = []

        for second in range(ramp_duration):
            current_users = int(second * users_per_second)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for _ in range(int(users_per_second)):
                task = self.simulate_user_session()
                tasks.append(task)

            await asyncio.sleep(1)

            if second % 10 == 0:
                print(f"   Current users: {current_users}")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks, return_exceptions=True)

        print(f"‚úÖ Ramp-up test completed in {time.time() - start_time:.2f}s")

    async def spike_test(self, normal_users: int = 10, spike_users: int = 100):
        """–¢–µ—Å—Ç —Å —Ä–µ–∑–∫–∏–º —Å–∫–∞—á–∫–æ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
        print(f"‚ö° Spike test: {normal_users} ‚Üí {spike_users} ‚Üí {normal_users} users")

        # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        normal_tasks = [self.simulate_user_session() for _ in range(normal_users)]
        await asyncio.sleep(10)

        # –†–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫
        spike_tasks = [self.simulate_user_session() for _ in range(spike_users)]
        await asyncio.sleep(30)

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        await asyncio.gather(*normal_tasks, *spike_tasks, return_exceptions=True)

        print("‚úÖ Spike test completed")

    async def simulate_user_session(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        async with aiohttp.ClientSession() as session:
            # –¢–∏–ø–∏—á–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            endpoints = [
                "/api/v1/products/",
                "/api/v1/products/1",
                "/api/v1/products/categories/stats",
                "/api/v1/products/meta/countries"
            ]

            for endpoint in endpoints:
                try:
                    async with session.get(f"{self.base_url}{endpoint}") as response:
                        await response.text()
                except Exception:
                    pass

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.5)


async def run_performance_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    perf_test = PerformanceTest()

    print("üöÄ Starting performance tests...")

    # –¢–µ—Å—Ç —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏
    await perf_test.ramp_up_test(max_users=50, ramp_duration=30)

    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await asyncio.sleep(10)

    # –¢–µ—Å—Ç —Å —Ä–µ–∑–∫–∏–º —Å–∫–∞—á–∫–æ–º
    await perf_test.spike_test(normal_users=5, spike_users=50)

    print("\n‚úÖ All performance tests completed!")


if __name__ == "__main__":
    asyncio.run(run_performance_tests())
